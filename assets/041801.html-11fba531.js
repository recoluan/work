import{_ as i,o as l,c as a,e}from"./app-6e895db1.js";const p={},r=e('<h2 id="基本功考察" tabindex="-1"><a class="header-anchor" href="#基本功考察" aria-hidden="true">#</a> 基本功考察</h2><h3 id="关于html" tabindex="-1"><a class="header-anchor" href="#关于html" aria-hidden="true">#</a> 关于Html</h3><ol><li><p>html语义化标签的理解. 结构化的理解；能否写出简洁的html结构；SEO优化。</p></li><li><p>h5中新增的属性，如自定义属性data. 类名className等；新增表单元素；拖拽Drag。</p></li><li><p>h5中新增的API. 修改的API. 废弃的API稍作了解（离线存储. audio. video）。</p></li></ol><h3 id="关于css" tabindex="-1"><a class="header-anchor" href="#关于css" aria-hidden="true">#</a> 关于CSS</h3><ol><li><p>CSS选择器（三大特性）。</p></li><li><p>BFC机制。</p></li><li><p>盒模型。</p></li><li><p>CSS模块化开发（封装）；SCSS和LESS的使用。</p></li><li><p>屏幕适配以及页面自适应。</p></li><li><p>CSS3中新增的选择器。</p></li><li><p>CSS3中新增的属性，transform. trasition. animation等。</p></li></ol><h3 id="关于布局" tabindex="-1"><a class="header-anchor" href="#关于布局" aria-hidden="true">#</a> 关于布局</h3><ol><li><p>标准文档流（padding + margin + 负margin）+ 浮动float + 定位 left + right + top + bottom。</p></li><li><p>百分比布局：px单位用%num代替，占父级元素的百分比。</p></li><li><p>flex弹性布局：主轴. 辅助轴的几个属性。</p></li><li><p>grid栅格布局：使用框架中的类名来替代，本质上还是百分比布局。</p></li></ol><h3 id="关于js基础" tabindex="-1"><a class="header-anchor" href="#关于js基础" aria-hidden="true">#</a> 关于JS基础</h3><ol><li><p>变量数据类型及检测：基本 + 引用。</p></li><li><p>运算符：算术 + 条件 + 逻辑 + 位 + 短路. 隐式转换等。</p></li><li><p>条件. 循环. 异常处理if. switch(){case xxx:}. try. catch. finally. throw。</p></li><li><p>函数定义. 调用方式（apply. call. 直接调用）；传参：实参给形参赋值。</p></li><li><p>字符串. 数组. 对象常用API。</p></li><li><p>正则表达式。</p></li></ol><h3 id="关于js高级" tabindex="-1"><a class="header-anchor" href="#关于js高级" aria-hidden="true">#</a> 关于JS高级</h3><ol><li><p>作用域. 作用域链. 闭包。</p></li><li><p>原型. 原型链. 继承。</p></li><li><p>函数上下文. this指向。</p></li><li><p>js的运行机制. 事件队列和循环。</p></li><li><p>Ajax原理. axios库。</p></li><li><p>同步. 异步编程。</p></li><li><p>jQuery源码学习。</p></li></ol><h3 id="关于浏览器" tabindex="-1"><a class="header-anchor" href="#关于浏览器" aria-hidden="true">#</a> 关于浏览器</h3><ol><li><p>浏览器的构成和运行机制。</p></li><li><p>浏览器内核。</p></li><li><p>浏览器交互：BOM和DOM相关webApi. 监听事件。</p></li><li><p>浏览器缓存机制。</p></li><li><p>浏览器的渲染原理。</p></li><li><p>浏览器的安全性：跨域和攻击。</p></li></ol><h3 id="关于网络协议" tabindex="-1"><a class="header-anchor" href="#关于网络协议" aria-hidden="true">#</a> 关于网络协议</h3><ol><li><p>HTTP协议。</p></li><li><p>cookie. session. token。</p></li></ol><h3 id="关于es6语法" tabindex="-1"><a class="header-anchor" href="#关于es6语法" aria-hidden="true">#</a> 关于ES6语法</h3><ol><li><p>字符串. 数组. 对象扩展的api。</p></li><li><p>变量扩展：let. const解构赋值，块级作用域。</p></li><li><p>函数扩展：箭头函数默认参数. rest参数。</p></li><li><p>展开运算符. 模板字符串。</p></li><li><p>set和map数据结构。</p></li><li><p>迭代器和生成器函数next和yield的理解。</p></li><li><p>proxy对象属性代理器：属性的读取（get）和设置（set）相关操作。</p></li><li><p>promise对象. 异步编程的解决方案。</p></li><li><p>async + await：异步编程的终极方案promise + generator的语法糖。</p></li><li><p>class语法. 构造函数的语法糖。</p></li><li><p>模块化编程export + import的导出和导入。</p></li></ol><h3 id="vue基础" tabindex="-1"><a class="header-anchor" href="#vue基础" aria-hidden="true">#</a> VUE基础</h3><ol><li><p>基本指令。</p></li><li><p>实例的属性和方法。</p></li><li><p>实例的生命周期。</p></li><li><p>组件基础：创建. 注册. 添加属性方法. 套用等。</p></li><li><p>组件通信传值，父子. 兄弟. 跨级。</p></li><li><p>插槽slot等。</p></li></ol><h3 id="vue高级" tabindex="-1"><a class="header-anchor" href="#vue高级" aria-hidden="true">#</a> VUE高级</h3><ol><li>vue-router：搭建SPA</li></ol><p>路由. 组件的配置。 路由间的传值。 路由跳转。 路由的导航守卫。 记住在router.js和组件页面中的使用方式。 2. vuex：状态管理. 数据仓库store</p><p>实例化仓库的5大属性的使用。 state. getters. mutations. actions. modules。 辅助函数mapState等，仓库中计算属性的映射. 方便操作。 记住在store.js和组件中使用方式。</p><h3 id="vue深入-源码阅读" tabindex="-1"><a class="header-anchor" href="#vue深入-源码阅读" aria-hidden="true">#</a> VUE深入. 源码阅读</h3><ol><li><p>数据响应式原理。</p></li><li><p>virtual dom。</p></li><li><p>diff 算法。</p></li><li><p>nextTick等等。</p></li></ol><h2 id="工程能力考察" tabindex="-1"><a class="header-anchor" href="#工程能力考察" aria-hidden="true">#</a> 工程能力考察</h2><h3 id="项目能力" tabindex="-1"><a class="header-anchor" href="#项目能力" aria-hidden="true">#</a> 项目能力</h3><ol><li><p>vue-cli脚手架搭建和功能配置vue.config.js。</p></li><li><p>webpack的常用配置。</p></li><li><p>项目构建打包。</p></li><li><p>熟悉各类框架的文档。</p></li><li><p>UI框架：Bootstrap. MUI. Element-ui等。</p></li><li><p>常用的插件整理；整理一个自己插件库，封装自己的方法库. 组件库。</p></li><li><p>常用的工具熟练度。</p></li><li><p>PC端和移动端开发注意事项。</p></li><li><p>经验总结：快速确定项目的技术选型。</p></li><li><p>坑点总结：项目遇到坑坑坑！</p></li><li><p>项目中的性能优化记录（都是细节点，多记录）。</p></li><li><p>需求文档的理解，可以结合项目流程图. UML图。</p></li><li><p>问题解决能力：bug定位调试. 查找文档. 寻求他人。</p></li><li><p>记录习惯养成。</p></li></ol><h3 id="模块化-组件化开发能力" tabindex="-1"><a class="header-anchor" href="#模块化-组件化开发能力" aria-hidden="true">#</a> 模块化. 组件化开发能力</h3><ol><li><p>项目分类；各类文件整理. 分类。</p></li><li><p>各类功能封装。</p></li><li><p>组件和功能模块的抽离. 解耦. 复用。</p></li></ol><h2 id="内功考察" tabindex="-1"><a class="header-anchor" href="#内功考察" aria-hidden="true">#</a> 内功考察</h2><h3 id="面向对象的编程思想" tabindex="-1"><a class="header-anchor" href="#面向对象的编程思想" aria-hidden="true">#</a> 面向对象的编程思想</h3><ol><li><p>类的抽象。</p></li><li><p>对象的封装. 继承。</p></li><li><p>为了更好的去管理数据. 分类数据，实现高内聚. 低耦合。</p></li></ol><h3 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h3><p>设计模式感觉也是将面向对象思想再度抽象成现实中某些特定模式。</p><h3 id="数据结构和算法" tabindex="-1"><a class="header-anchor" href="#数据结构和算法" aria-hidden="true">#</a> 数据结构和算法</h3><ol><li><p>学习常用的排序搜索算法. 顺序表. 链表. 栈. 队列. 树. 堆等。</p></li><li><p>考验你的抽象思维和数学功底。</p></li><li><p>将现实需求抽象成计算机代码的思维能力。</p></li></ol><h2 id="附加技能考察" tabindex="-1"><a class="header-anchor" href="#附加技能考察" aria-hidden="true">#</a> 附加技能考察</h2><h3 id="学习能力" tabindex="-1"><a class="header-anchor" href="#学习能力" aria-hidden="true">#</a> 学习能力</h3><ol><li><p>持续学习的态度——博客. 笔记记录。</p></li><li><p>技术论坛活跃度高. 问答多。</p></li><li><p>GitHub开源项目参与。</p></li></ol><h3 id="了解一门后端语言" tabindex="-1"><a class="header-anchor" href="#了解一门后端语言" aria-hidden="true">#</a> 了解一门后端语言</h3><ol><li><p>python. node.js. php等。</p></li><li><p>数据库mysql. redis. mongodb；sql的操作语句. mongodb的操作语句. redis的操作语句。</p></li><li><p>node + express搭建本地服务等。</p></li><li><p>python + django + request + scrapy。</p></li></ol><h3 id="系统编程" tabindex="-1"><a class="header-anchor" href="#系统编程" aria-hidden="true">#</a> 系统编程</h3><ol><li><p>Linux命令行操作. 系统文件管理。</p></li><li><p>多任务. 多线程. 多进程. 协程. 并发. 并行. 串行. 同步. 异步等概念的理解。</p></li></ol>',44),h=[r];function d(t,o){return l(),a("div",null,h)}const n=i(p,[["render",d],["__file","041801.html.vue"]]);export{n as default};
