import{_ as l,r as c,o,c as r,a as s,b as n,d as i,e as a}from"./app-6e895db1.js";const t={},d=a(`<h2 id="一、docker-介绍" tabindex="-1"><a class="header-anchor" href="#一、docker-介绍" aria-hidden="true">#</a> 一、Docker 介绍</h2><h2 id="二、docker-基本操作" tabindex="-1"><a class="header-anchor" href="#二、docker-基本操作" aria-hidden="true">#</a> 二、Docker 基本操作</h2><h3 id="_2-1-安装" tabindex="-1"><a class="header-anchor" href="#_2-1-安装" aria-hidden="true">#</a> 2.1 安装</h3><p><strong>1. 下载 docker 的依赖环境</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> yum-utils device-mapper-persistent-data lvm2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2. 设置 docker 的镜像资源</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum-config-manager--add-repohttp://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3. 安装 docker</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum makacache fast
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 启动，并设置为开机自启动，测试</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动服务</span>
systemctl start <span class="token function">docker</span>

<span class="token comment"># 设置开机自启动</span>
systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>

<span class="token comment"># 测试</span>
<span class="token function">docker</span> run hello-world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-docker-中央仓库" tabindex="-1"><a class="header-anchor" href="#_2-2-docker-中央仓库" aria-hidden="true">#</a> 2.2 Docker 中央仓库</h3>`,12),p={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://c.163yun.com/hub#/home",target:"_blank",rel:"noopener noreferrer"},m={href:"http://hub.daocloud.io/",target:"_blank",rel:"noopener noreferrer"},v=a(`<li>在公司内部会采用私服的方式拉取镜像（添加配置）<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 需要在 /etc/docker/daemon.json</span>

<span class="token punctuation">{</span>
  <span class="token string">&quot;registry-mirrors&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://registry.docker-cn.com&quot;</span><span class="token punctuation">]</span>,
  <span class="token string">&quot;insecure-registries&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;ip:port&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment"># 重启两个服务</span>
systemctl daemon-reload
systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),b=a(`<h3 id="_2-3-docker-镜像操作" tabindex="-1"><a class="header-anchor" href="#_2-3-docker-镜像操作" aria-hidden="true">#</a> 2.3 Docker 镜像操作</h3><p><strong>1. 拉取镜像到本地</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull 镜像名称<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span>

<span class="token comment"># 举例</span>
<span class="token function">docker</span> pull daocloud.io/library/tomcat:8.5.15-jre8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 查看全部本地镜像</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3. 删除本地镜像</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi 镜像的标识
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>4. 镜像导入导出</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将本地镜像导出</span>
<span class="token function">docker</span> save <span class="token parameter variable">-o</span> 导出的路径 镜像id

<span class="token comment"># 加载本地的镜像文件</span>
<span class="token function">docker</span> load <span class="token parameter variable">-i</span> 镜像文件

<span class="token comment"># 修改镜像名称</span>
<span class="token function">docker</span> tag 镜像id 新镜像名称:tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-docker-容器操作" tabindex="-1"><a class="header-anchor" href="#_2-4-docker-容器操作" aria-hidden="true">#</a> 2.4 Docker 容器操作</h3><p><strong>1. 运行容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 简单操作（如果没有镜像会先拉取镜像）</span>
<span class="token function">docker</span> run 镜像的标识<span class="token operator">|</span>镜像名称<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span>

<span class="token comment"># 常用参数</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> 宿主机端口:容器端口 <span class="token parameter variable">--name</span> 容器名称 镜像的标识<span class="token operator">|</span>镜像名称<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span>

<span class="token comment"># -d：代表后台运行容器</span>
<span class="token comment"># -p 宿主机端口:容器端口：为了映射宿主机端口和容器端口</span>
<span class="token comment"># --name 容器名称：置顶容器名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 查看正在运行的容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token punctuation">[</span>-qa<span class="token punctuation">]</span>

<span class="token comment"># -a：查看全部容器，包括没有运行的</span>
<span class="token comment"># -q：只查看容器的唯一标识</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 查看容器的日志</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> 容器id

<span class="token comment"># -f：可以滚动查看日志的最后几行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 进入容器内部</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器id <span class="token function">bash</span>

<span class="token comment"># 一般不建议进入容器操作命令，但是可以查看路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. 删除容器（删除前必须先停止容器）</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop 容器id
<span class="token function">docker</span> <span class="token function">rm</span> 容器id

<span class="token comment"># 删除所有容器</span>
<span class="token function">docker</span> stop <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-qa</span><span class="token variable">)</span></span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-qa</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6. 启动容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start 容器id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="三、docker-应用" tabindex="-1"><a class="header-anchor" href="#三、docker-应用" aria-hidden="true">#</a> 三、Docker 应用</h2><h3 id="_3-1-准备-mysql-容器" tabindex="-1"><a class="header-anchor" href="#_3-1-准备-mysql-容器" aria-hidden="true">#</a> 3.1 准备 MySQL 容器</h3><p><strong>1. 运行 MySQL 容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root daocloud.io/library/mysql:5.7.4

<span class="token comment"># -e MYSQL_ROOT_PASSWORD=root 设置 root 账户密码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-准备-tomcat-容器" tabindex="-1"><a class="header-anchor" href="#_3-2-准备-tomcat-容器" aria-hidden="true">#</a> 3.2 准备 Tomcat 容器</h3><p><strong>1. 运行 Tomcat 容器，见前文</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">--name</span> tomcat b8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2. 可以通过命令将宿主机的内容拷贝到容器内部</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> 文件名称 容器id:容器内部路径

<span class="token comment"># 例子</span>
<span class="token function">docker</span> <span class="token function">cp</span> ssm.war fe:/user/local/tomcat/webapps/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 例子</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> ssm.war fe:/user/local/tomcat/webapps/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3-数据卷" tabindex="-1"><a class="header-anchor" href="#_3-3-数据卷" aria-hidden="true">#</a> 3.3 数据卷</h3><blockquote><p>将主机的一个目录映射到容器的一个目录中。可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变</p></blockquote><p><strong>1. 创建数据卷</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume create 数据卷名称

<span class="token comment"># 创建数据卷之后，默认和存放在一个目录下/var/lib/docker/volumes/数据卷名称/_data</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>1. 创建数据卷</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume create 数据卷名称

<span class="token comment"># 创建数据卷之后，默认和存放在一个目录下/var/lib/docker/volumes/数据卷名称/_data</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 查看数据卷详细信息</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume inspect 数据卷名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3. 查看全部数据卷</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>4. 删除数据卷</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume remove 数据卷名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>5. 应用数据卷</strong></p><p>当你映射数据卷时，如果数据不存在，Docker 会自动创建，会将容器内部自带的文件，存储在默认的存放路径中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-v</span> 数据卷名称:容器内部的路径 镜像ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直接指定一个路径作为数据卷的存放的为主，这个路径是空的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-v</span> 路径:容器内部路径 镜像ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="四、docker-自定义镜像" tabindex="-1"><a class="header-anchor" href="#四、docker-自定义镜像" aria-hidden="true">#</a> 四、Docker 自定义镜像</h2><blockquote><p>中央仓库上的镜像，也是 Docker 的用户自己上传上去的。</p></blockquote><p><strong>1. 创建一个 Dockerfile 文件，并且指定自定义镜像信息</strong></p><p>Dockerfile 文件中常用的内容</p><ul><li>from: 指定当前自定义镜像依赖的环境</li><li>copy: 将相对路径下的内容复制到自定义镜像中</li><li>workdir: 声明镜像的默认工作目录</li><li>cmd: 需要指定的命令（在 workdir 执行的，cmd 可以写多的，只以最后一个为准）</li></ul><p>自定义一个 Tomcat 镜像，并且 ssm.war 部署到 Tomcat 中</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>from daocloud.io/library/tomcat:8.5.15-jre8
copy ssm.war /usr/local/tomcat/webapps
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 将准备好的 Dockerfile 和相应的文件拖拽到 Linux 操作系统中，通过 Docker 的命令制作镜像</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker build -t 镜像名称:[tag] .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="五、docker-compose" tabindex="-1"><a class="header-anchor" href="#五、docker-compose" aria-hidden="true">#</a> 五、Docker-Compose</h2><h3 id="_5-1" tabindex="-1"><a class="header-anchor" href="#_5-1" aria-hidden="true">#</a> 5.1</h3><p><strong>1. GitHub 下载 1.24.1 版本</strong></p><p><strong>2. 将下载好的文件，拖拽到 Linux 操作系统中</strong></p><p><strong>3. 需要阿静 DockerCompose 文件的名称修改一下，基于 DockerCompose 文件一个可执行的权限</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mv docker-compose-Linux-x86_64 docker-compose
chmod 777 docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 方便后期操作，配置一个环境变量</strong></p><p>将 docker-compose 文件移动到了 /usr/local/bin，修改了 /etc/profile 文件，给 /usr/local/bin 配置到了 PATH 中</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mv docker-compose /usr/local/bin
vi /etc/profile
  export PATH=$JAVA_HOME:/usr/local/bin:$PATH
source /etc/profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. 测试</strong></p><p>任意目录数据输入 docker-compose</p><h3 id="_5-2-docker-compose-管理-mysql-和-tomcat" tabindex="-1"><a class="header-anchor" href="#_5-2-docker-compose-管理-mysql-和-tomcat" aria-hidden="true">#</a> 5.2 docker-compose 管理 MySql 和 Tomcat</h3>`,71),k=s("div",{class:"custom-container tip"},[s("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[s("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[s("circle",{cx:"12",cy:"12",r:"9"}),s("path",{d:"M12 8h.01"}),s("path",{d:"M11 12h1v4h1"})])]),s("p",{class:"custom-container-title"},"TIP"),s("ul",null,[s("li",null,"yml 文件以 key: value 方式来指定配置信息"),s("li",null,"多个配置信息用换行 + 缩进的方式来区分"),s("li",null,"在 docker-compose.yml 文件中，不要使用制表符")])],-1),h=a(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.1&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">image</span><span class="token punctuation">:</span> daocloud.io/librarty/mysql<span class="token punctuation">:</span>5.7.4
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 3306<span class="token punctuation">:</span><span class="token number">3306</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> root
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai
    <span class="token key atrule">voulmes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /opt/docker_mysql_tomcat/mysql_data<span class="token punctuation">:</span>/var/lib/mysql
  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">image</span><span class="token punctuation">:</span> daocloud.io/librarty/tomcat<span class="token punctuation">:</span>8.5.15<span class="token punctuation">-</span>jre8
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> tomcat
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /opt/docker_mysql_tomcat/tomcat_webapps<span class="token punctuation">:</span>/usr/local/tomcat/webapps
      <span class="token punctuation">-</span> /opt/docker_mysql_tomcat/tomcat_logs<span class="token punctuation">:</span>/usr/local/tomcat/logs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-使用" tabindex="-1"><a class="header-anchor" href="#_5-3-使用" aria-hidden="true">#</a> 5.3 使用</h3><p>在使用 docker-compose 的命令时，默认会在当前目录下找 docker-compose.yml 文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 基于 docker-compose.yml 启动管理的容器</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 关闭并删除容器</span>
<span class="token function">docker-compose</span> down
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 开启|关闭|重启 已经存在的由 docker-compose 维护的容器</span>
<span class="token function">docker-compose</span> start<span class="token operator">|</span>stop<span class="token operator">|</span>restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看由 docker-compose 管理的容器</span>
<span class="token function">docker-compose</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看日志</span>
<span class="token function">docker-compose</span> logs <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、docker-di-cd" tabindex="-1"><a class="header-anchor" href="#六、docker-di-cd" aria-hidden="true">#</a> 六、Docker DI\\CD</h2>`,9);function g(f,x){const e=c("ExternalLinkIcon");return o(),r("div",null,[d,s("ol",null,[s("li",null,[n("Docker 官方的中央仓库：这个仓库是镜像最全的，但是下载速度较慢，"),s("a",p,[n("地址"),i(e)])]),s("li",null,[n("国内镜像："),s("a",u,[n("网易蜂巢"),i(e)]),n("、"),s("a",m,[n("DaoCloud"),i(e)]),n("（推荐）")]),v]),b,k,h])}const y=l(t,[["render",g],["__file","docker.html.vue"]]);export{y as default};
