import{_ as o,r as l,o as p,c as r,a as n,d as s,w as t,b as a,e as c}from"./app-6e895db1.js";const d="/assets/webkit-bc1399d5.png",u="/assets/Gecko-d686304c.png",h="/assets/html-d19c62fb.png",m="/assets/css-828c6566.png",k="/assets/render-81cfe961.png",g={},f={class:"table-of-contents"},b=c(`<h2 id="什么是doctype及其作用" tabindex="-1"><a class="header-anchor" href="#什么是doctype及其作用" aria-hidden="true">#</a> 什么是DOCTYPE及其作用</h2><p>DTD（document type definition，文档类型定义）是一系列的语法规则，用来定义XML或（X）HTML的文件类型。浏览器会使用它来判断文档类型，决定使用何种协议来解析，以及切换浏览器模式。</p><p>DOCTYPE 是用来声明文档类型和DTD规范的，一个主要的用途就是文件的合法性验证。如果文件代码不合法，那么浏览器解析时就会出一些差错。</p><p>通俗地讲，DTD 告诉浏览器怎么渲染，DOCTYPE 告诉浏览器该文件的 DTD 是什么。</p><h3 id="常见的-doctype-有哪些" tabindex="-1"><a class="header-anchor" href="#常见的-doctype-有哪些" aria-hidden="true">#</a> 常见的 DOCTYPE 有哪些？</h3><p><strong>HTML5</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>HTML 4.01 Strict</strong></p><p>该 DTD 包含所有 HTML 元素和属性，但不包括展示型的和废弃的元素（比如 font）</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="token string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>HTML 4.01 Transitional</strong></p><p>该 DTD 包含所有 HTML 元素和属性，包括展示型的和废弃的元素（比如 font）</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> 
<span class="token string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>HTML 4.01 Frameset</strong></p><p>该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot;</span> 
<span class="token string">&quot;http://www.w3.org/TR/html4/frameset.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浏览器渲染过程" tabindex="-1"><a class="header-anchor" href="#浏览器渲染过程" aria-hidden="true">#</a> 浏览器渲染过程</h2><blockquote><p>学习文档：https://segmentfault.com/a/1190000010298038</p></blockquote><h3 id="从用户输入浏览器输入url到页面最后呈现-有哪些过程" tabindex="-1"><a class="header-anchor" href="#从用户输入浏览器输入url到页面最后呈现-有哪些过程" aria-hidden="true">#</a> 从用户输入浏览器输入url到页面最后呈现 有哪些过程？</h3><ol><li>用户输入URL地址</li><li>浏览器解析URL解析出主机名</li><li>浏览器将主机名转换成服务器ip地址（浏览器先查找本地DNS缓存列表 没有的话 再向浏览器默认的DNS服务器发送查询请求 同时缓存）</li><li>浏览器将端口号从URL中解析出来</li><li>浏览器建立一条与目标Web服务器的TCP连接（三次握手）</li><li>浏览器向服务器发送一条HTTP请求报文</li><li>服务器向浏览器返回一条HTTP响应报文</li><li>关闭连接 浏览器解析文档</li><li>如果文档中有资源 重复6、7、8次动作 直至资源全部加载完毕</li></ol><p>但是对于前端页面的渲染，也就是浏览器拿到数据之后怎么渲染页面的，也是一个非常复杂的过程。</p><h3 id="浏览器渲染过程webkit" tabindex="-1"><a class="header-anchor" href="#浏览器渲染过程webkit" aria-hidden="true">#</a> 浏览器渲染过程webkit</h3><p><strong>WebKit主流程</strong></p><img src="`+d+'"><p><strong>Mozilla 的 Gecko 呈现引擎主流程</strong></p><img src="'+u+'"><p>由上面两张图可以看出，虽然主流浏览器渲染过程叫法有区别，但是主要流程还是相同的。 Gecko 将视觉格式化元素组成的树称为“框架树”。每个元素都是一个框架。WebKit 使用的术语是“呈现树”，它由“呈现对象”组成。对于元素的放置，WebKit 使用的术语是“布局”，而 Gecko 称之为“重排”。对于连接 DOM 节点和可视化信息从而创建呈现树的过程，WebKit 使用的术语是“附加”。</p><p><strong>所以可以分析出基本过程：</strong></p><ol><li>HTML解析出DOM Tree</li><li>CSS解析出Style Rules</li><li>将二者关联生成Render Tree</li><li>Layout 根据Render Tree计算每个节点的信息</li><li>Painting 根据计算好的信息绘制整个页面</li></ol><h3 id="html解析" tabindex="-1"><a class="header-anchor" href="#html解析" aria-hidden="true">#</a> HTML解析</h3><p>HTML Parser的任务是将HTML标记解析成DOM Tree，经过解析之后的DOM Tree差不多就是，将文本的HTML文档，提炼出关键信息，嵌套层级的树形结构，便于计算拓展。这就是HTML Parser的作用。</p><img src="'+h+'"><h3 id="css解析" tabindex="-1"><a class="header-anchor" href="#css解析" aria-hidden="true">#</a> CSS解析</h3><p>CSS Parser将CSS解析成Style Rules，Style Rules也叫CSSOM（CSS Object Model）。StyleRules也是一个树形结构，根据CSS文件整理出来的类似DOM Tree的树形结构，于HTML Parser相似，CSS Parser作用就是将很多个CSS文件中的样式合并解析出具有树形结构Style Rules。</p><img src="'+m+'"><h3 id="脚本处理" tabindex="-1"><a class="header-anchor" href="#脚本处理" aria-hidden="true">#</a> 脚本处理</h3><p>浏览器解析文档，当遇到 <code>&lt;script&gt;</code> 标签的时候，会立即解析脚本，停止解析文档（因为JS可能会改动DOM和CSS，所以继续解析会造成浪费）。如果脚本是外部的，会等待脚本下载完毕，再继续解析文档。现在可以在script标签上增加属性 <code>defer</code> 或者 <code>async</code> 。脚本解析会将脚本中改变DOM和CSS的地方分别解析出来，追加到DOM Tree和Style Rules上。</p><h3 id="呈现树-render-tree" tabindex="-1"><a class="header-anchor" href="#呈现树-render-tree" aria-hidden="true">#</a> 呈现树（Render Tree）</h3><p>Render Tree的构建其实就是DOM Tree和CSSOM Attach的过程。呈现器是和 DOM 元素相对应的，但并非一一对应。Render Tree实际上就是一个计算好样式，与HTML对应的（包括哪些显示，那些不显示）的Tree。</p><blockquote><p>在 WebKit 中，解析样式和创建呈现器的过程称为“附加”。每个 DOM 节点都有一个“attach”方法。附加是同步进行的，将节点插入 DOM 树需要调用新的节点“attach”方法。</p></blockquote><img src="'+k+`"><h3 id="样式计算" tabindex="-1"><a class="header-anchor" href="#样式计算" aria-hidden="true">#</a> 样式计算</h3><p>样式计算是个很复杂的问题。DOM中的一个元素可以对应样式表中的多个元素。样式表包括了所有样式：浏览器默认样式表，自定义样式表，inline样式元素，<strong>HTML可视化属性如：width=100。后者将转化以匹配CSS样式</strong>。</p><h3 id="布局layout" tabindex="-1"><a class="header-anchor" href="#布局layout" aria-hidden="true">#</a> 布局Layout</h3><p>创建渲染树后，下一步就是布局（Layout）,或者叫回流（reflow,relayout），这个过程就是通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸，将其安置在浏览器窗口的正确位置，而有些时候我们会在文档布局完成后对DOM进行修改，这时候可能需要重新进行布局，也可称其为回流，本质上还是一个布局的过程，每一个渲染对象都有一个布局或者回流方法，实现其布局或回流。</p><p>对渲染树的布局可以分为全局和局部的，全局即对整个渲染树进行重新布局，如当我们改变了窗口尺寸或方向或者是修改了根元素的尺寸或者字体大小等；而局部布局可以是对渲染树的某部分或某一个渲染对象进行重新布局。</p><p>大多数web应用对DOM的操作都是比较频繁，这意味着经常需要对DOM进行布局和回流，而如果仅仅是一些小改变，就触发整个渲染树的回流，这显然是不好的，为了避免这种情况，浏览器使用了脏位系统，只有一个渲染对象改变了或者某渲染对象及其子渲染对象脏位值为”dirty”时，说明需要回流。</p><p>表示需要布局的脏位值有两种：</p><ul><li><p>“dirty”–自身改变，需要回流</p></li><li><p>“children are dirty”–子节点改变，需要回流</p></li></ul><p>布局是一个从上到下，从外到内进行的递归过程，从根渲染对象，即对应着HTML文档根元素，然后下一级渲染对象，如对应着元素，如此层层递归，依次计算每一个渲染对象的几何信息（位置和尺寸）。</p><p>每一个渲染对象的布局流程基本如：</p><ol><li>计算此渲染对象的宽度（width）；</li><li>遍历此渲染对象的所有子级，依次： <ol><li>设置子级渲染对象的坐标</li><li>判断是否需要触发子渲染对象的布局或回流方法，计算子渲染对象的高度（height）</li></ol></li><li>设置此渲染对象的高度：根据子渲染对象的累积高，margin和padding的高度设置其高度；</li><li>设置此渲染对象脏位值为false。</li></ol><h3 id="绘制-painting" tabindex="-1"><a class="header-anchor" href="#绘制-painting" aria-hidden="true">#</a> 绘制（Painting）</h3><p>在绘制阶段，系统会遍历呈现树，并调用呈现器的“paint”方法，将呈现器的内容显示在屏幕上。绘制工作是使用用户界面基础组件完成的。</p><p>CSS2 规范定义了绘制流程的顺序。绘制的顺序其实就是元素进入堆栈样式上下文的顺序。这些堆栈会从后往前绘制，因此这样的顺序会影响绘制。块呈现器的堆栈顺序如下：</p><ol><li>背景颜色</li><li>背景图片</li><li>边框</li><li>子代</li><li>轮廓</li></ol><p>这里还要说两个概念，一个是Reflow，另一个是Repaint。这两个不是一回事。</p><p><strong>Repaint</strong> ——屏幕的一部分要重画，比如某个CSS的背景色变了。但是元素的几何尺寸没有变。</p><p><strong>Reflow</strong> 元件的几何尺寸变了，我们需要重新验证并计算Render Tree。是Render Tree的一部分或全部发生了变化。这就是Reflow，或是Layout。（HTML使用的是flow based layout，也就是流式布局，所以，如果某元件的几何尺寸发生了变化，需要重新布局，也就叫reflow）reflow 会从 <code>&lt;html&gt;</code> 这个root frame开始递归往下，依次计算所有的结点几何尺寸和位置，在reflow过程中，可能会增加一些frame，比如一个文本字符串必需被包装起来。</p><p>Reflow的成本比Repaint的成本高得多的多。DOM Tree里的每个结点都会有reflow方法，一个结点的reflow很有可能导致子结点，甚至父点以及同级结点的reflow。在一些高性能的电脑上也许还没什么，但是如果reflow发生在手机上，那么这个过程是非常痛苦和耗电的。 所以，下面这些动作有很大可能会是成本比较高的。</p><ul><li>当你增加、删除、修改DOM结点时，会导致Reflow或Repaint</li><li>当你移动DOM的位置，或是搞个动画的时候。</li><li>当你修改CSS样式的时候。</li><li>当你Resize窗口的时候（移动端没有这个问题），或是滚动的时候。</li><li>当你修改网页的默认字体时。</li><li>注：display:none会触发reflow，而visibility:hidden只会触发repaint，因为没有发现位置变化。</li></ul><p>基本上来说，reflow有如下的几个原因：</p><ul><li>Initial。网页初始化的时候。</li><li>Incremental。一些Javascript在操作DOM Tree时。</li><li>Resize。其些元件的尺寸变了。</li><li>StyleChange。如果CSS的属性发生变化了。</li><li>Dirty。几个Incremental的reflow发生在同一个frame的子树上。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// repaint</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;margin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2px&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// reflow, repaint</span>

<span class="token keyword">var</span> bstyle <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">;</span> <span class="token comment">// cache</span>

bstyle<span class="token punctuation">.</span>padding <span class="token operator">=</span> <span class="token string">&quot;20px&quot;</span><span class="token punctuation">;</span> <span class="token comment">// reflow, repaint</span>
bstyle<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">&quot;10px solid red&quot;</span><span class="token punctuation">;</span> <span class="token comment">//  再一次的 reflow 和 repaint</span>

bstyle<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span> <span class="token comment">// repaint</span>
bstyle<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&quot;#fad&quot;</span><span class="token punctuation">;</span> <span class="token comment">// repaint</span>

bstyle<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">&quot;2em&quot;</span><span class="token punctuation">;</span> <span class="token comment">// reflow, repaint</span>

<span class="token comment">// new DOM element - reflow, repaint</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#39;dude!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，我们的浏览器是聪明的，它不会像上面那样，你每改一次样式，它就reflow或repaint一次。一般来说，浏览器会把这样的操作积攒一批，然后做一次reflow，这又叫异步reflow或增量异步reflow。但是有些情况浏览器是不会这么做的，比如：resize窗口，改变了页面默认的字体，等。对于这些操作，浏览器会马上进行reflow。</p><p>但是有些时候，我们的脚本会阻止浏览器这么干，比如：如果我们请求下面的一些DOM值：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>offsetTop, offsetLeft, offsetWidth, offsetHeight
scrollTop/Left/Width/Height
clientTop/Left/Width/Height
IE中的 getComputedStyle(), 或 currentStyle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为，如果我们的程序需要这些值，那么浏览器需要返回最新的值，而这样一样会flush出去一些样式的改变，从而造成频繁的reflow/repaint。</p><h3 id="chrome渲染顺序" tabindex="-1"><a class="header-anchor" href="#chrome渲染顺序" aria-hidden="true">#</a> Chrome渲染顺序</h3><ol><li>发起请求；</li><li>解析HTML；</li><li>解析样式；</li><li>执行JavaScript；</li><li>布局；</li><li>绘制</li></ol><h3 id="页面渲染优化" tabindex="-1"><a class="header-anchor" href="#页面渲染优化" aria-hidden="true">#</a> 页面渲染优化</h3><p>浏览器对上文介绍的关键渲染路径进行了很多优化，针对每一次变化产生尽量少的操作，还有优化判断重新绘制或布局的方式等等。 在改变文档根元素的字体颜色等视觉性信息时，会触发整个文档的重绘，而改变某元素的字体颜色则只触发特定元素的重绘；改变元素的位置信息会同时触发此元素（可能还包括其兄弟元素或子级元素）的布局和重绘。某些重大改变，如更改文档根元素的字体尺寸，则会触发整个文档的重新布局和重绘，据此及上文所述，推荐以下优化和实践：</p><ol><li>HTML文档结构层次尽量少，最好不深于六层；</li><li>脚本尽量后放，放在前即可；</li><li>少量首屏样式内联放在标签内；</li><li>样式结构层次尽量简单；</li><li>在脚本中尽量减少DOM操作，尽量缓存访问DOM的样式信息，避免过度触发回流；</li><li>减少通过JavaScript代码修改元素样式，尽量使用修改class名方式操作样式或动画；</li><li>动画尽量使用在绝对定位或固定定位的元素上；</li><li>隐藏在屏幕外，或在页面滚动时，尽量停止动画；</li><li>尽量缓存DOM查找，查找器尽量简洁；</li><li>涉及多域名的网站，可以开启域名预解析</li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>浏览器渲染是个很繁琐的过程，其中每一步都有对应的算法。</p><p>了解渲染过程原理可以有针对的性能优化，而且也可以懂得一些基本的要求和规范的原理。</p><p>最后文章中间很多语句都是直接复制的原文，自己的语言概况还是不及原文精彩。</p>`,77),v={href:"https://www.cnblogs.com/leetom/archive/2011/01/20/2845920.html",target:"_blank",rel:"noopener noreferrer"};function T(M,D){const e=l("router-link"),i=l("ExternalLinkIcon");return p(),r("div",null,[n("nav",f,[n("ul",null,[n("li",null,[s(e,{to:"#什么是doctype及其作用"},{default:t(()=>[a("什么是DOCTYPE及其作用")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#常见的-doctype-有哪些"},{default:t(()=>[a("常见的 DOCTYPE 有哪些？")]),_:1})])])]),n("li",null,[s(e,{to:"#浏览器渲染过程"},{default:t(()=>[a("浏览器渲染过程")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#从用户输入浏览器输入url到页面最后呈现-有哪些过程"},{default:t(()=>[a("从用户输入浏览器输入url到页面最后呈现 有哪些过程？")]),_:1})]),n("li",null,[s(e,{to:"#浏览器渲染过程webkit"},{default:t(()=>[a("浏览器渲染过程webkit")]),_:1})]),n("li",null,[s(e,{to:"#html解析"},{default:t(()=>[a("HTML解析")]),_:1})]),n("li",null,[s(e,{to:"#css解析"},{default:t(()=>[a("CSS解析")]),_:1})]),n("li",null,[s(e,{to:"#脚本处理"},{default:t(()=>[a("脚本处理")]),_:1})]),n("li",null,[s(e,{to:"#呈现树-render-tree"},{default:t(()=>[a("呈现树（Render Tree）")]),_:1})]),n("li",null,[s(e,{to:"#样式计算"},{default:t(()=>[a("样式计算")]),_:1})]),n("li",null,[s(e,{to:"#布局layout"},{default:t(()=>[a("布局Layout")]),_:1})]),n("li",null,[s(e,{to:"#绘制-painting"},{default:t(()=>[a("绘制（Painting）")]),_:1})]),n("li",null,[s(e,{to:"#chrome渲染顺序"},{default:t(()=>[a("Chrome渲染顺序")]),_:1})]),n("li",null,[s(e,{to:"#页面渲染优化"},{default:t(()=>[a("页面渲染优化")]),_:1})]),n("li",null,[s(e,{to:"#总结"},{default:t(()=>[a("总结")]),_:1})])])])])]),b,n("blockquote",null,[n("p",null,[a("学习资料："),n("a",v,[a("HTML/CSS页面重绘与回流 "),s(i)])])])])}const S=o(g,[["render",T],["__file","030703.html.vue"]]);export{S as default};
