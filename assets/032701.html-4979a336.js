import{_ as n,o as s,c as a,e}from"./app-6e895db1.js";const t="/assets/zepto-79b0fc36.png",p={},o=e(`<h2 id="javascript原型基础知识" tabindex="-1"><a class="header-anchor" href="#javascript原型基础知识" aria-hidden="true">#</a> javascript原型基础知识</h2><ol><li>每个函数都有一个prototype属性；</li><li>每个new出来的实例都一个隐式原型 <code>__proto__</code> 指向于函数的显式原型 <code>prototype</code> ；</li><li>当实例上没有某个方法或属性的时候，就会去隐式原型上找；</li><li>实例的隐式原型 <code>__proto__</code> 是可以修改的。</li></ol><blockquote><p>引用第三方cdn的时候使用 <code>//cdn.bootcss.com/zepto/1.2.0/zepto.js</code> ，目的是，不管用户使用的 <code>http</code> 还是 <code>https</code> ，均可以正常访问。</p></blockquote><h2 id="zepto结构" tabindex="-1"><a class="header-anchor" href="#zepto结构" aria-hidden="true">#</a> Zepto结构</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Zepto <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> $

  <span class="token comment">// ...省略代码...</span>

  <span class="token function-variable function">$</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> zepto<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// ...省略代码...</span>

  <span class="token keyword">return</span> $
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>Zepto <span class="token operator">=</span> Zepto
window<span class="token punctuation">.</span>$ <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token function">$$</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>$ <span class="token operator">=</span> Zepto<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的一个好处就是将Zepto的内部变量封装在一个匿名函数内，避免全局污染。</p><h2 id="zepto-init-函数" tabindex="-1"><a class="header-anchor" href="#zepto-init-函数" aria-hidden="true">#</a> <code>Zepto.init</code> 函数</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Zepto <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> $<span class="token punctuation">,</span>
    zepto <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    
  <span class="token comment">// ...省略代码...</span>
    
  zepto<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 函数内容</span>
  <span class="token punctuation">}</span>
    
    
  <span class="token function-variable function">$</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> zepto<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
    
  <span class="token comment">// ...省略代码...</span>
    
  <span class="token keyword">return</span> $
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>Zepto <span class="token operator">=</span> Zepto
window<span class="token punctuation">.</span>$ <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>$ <span class="token operator">=</span> Zepto<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="zepto-init-函数大约有几十行代码-把中间的那些if-else-操作去掉-剩下的就是" tabindex="-1"><a class="header-anchor" href="#zepto-init-函数大约有几十行代码-把中间的那些if-else-操作去掉-剩下的就是" aria-hidden="true">#</a> <code>zepto.init</code> 函数大约有几十行代码，把中间的那些if...else...操作去掉，剩下的就是：</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>zepto<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> dom
    
  <span class="token comment">// ...此处省略N行...</span>
    
  <span class="token comment">// create a new Zepto collection from the nodes found</span>
  <span class="token keyword">return</span> zepto<span class="token punctuation">.</span><span class="token constant">Z</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> selector<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>中间省略的代码，都是根据不同条件下对dom变量进行赋值。dom从名字也可以猜测出来，它将会赋值一个或多个DOM节点。最终，它将通过selector一起传递给zepto.Z函数并返回值。</p><p>下面看看中间省略的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>zepto<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> dom
    
  <span class="token comment">// 分情况对dom赋值：</span>
  <span class="token comment">// 1. selector 为空</span>
  <span class="token comment">// 2. selector 是字符串，其中又分好几种情况</span>
  <span class="token comment">// 3. selector 是函数</span>
  <span class="token comment">// 4. 其他情况，例如 selector 是数组、对象等</span>
    
    <span class="token comment">// create a new Zepto collection from the nodes found</span>
  <span class="token keyword">return</span> zepto<span class="token punctuation">.</span><span class="token constant">Z</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> selector<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>无参数，即$()</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// If nothing given, return an empty Zepto collection</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selector<span class="token punctuation">)</span> <span class="token keyword">return</span> zepto<span class="token punctuation">.</span><span class="token constant">Z</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>selector</code> 参数是字符串，例如 <code>$(&#39;p&#39;)</code> ，<code>$(&#39;&lt;div&gt;&#39;)</code>，<code>$(&#39;#content&#39;)</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> selector <span class="token operator">==</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  selector <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">/*
   * 情况1
   * 参数为&lt;div&gt;这种形式，即是一个html标签的，那么dom变量会被赋值为用这个标签创建的DOM对象，就像dom = document.createElement(&#39;div&#39;)差不多。
   * 其中涉及到了fragmentRE和zepto.fragment两个我们尚未了解的东东，此处不要深究，知道这段代码的意思即可。
   * 注意，通过测试发现，这里给dom赋值的其实不是一个dom节点对象，而是被封装称了数组。
   */</span>

注意，通过测试发现，这里给dom赋值的其实不是一个dom节点对象，而是被封装称了数组。
  <span class="token keyword">if</span> <span class="token punctuation">(</span>selector<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;&lt;&#39;</span> <span class="token operator">&amp;&amp;</span> fragmentRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span>
    dom <span class="token operator">=</span> zepto<span class="token punctuation">.</span><span class="token function">fragment</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">,</span> context<span class="token punctuation">)</span>selector <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token comment">/*
   * 情况2
   * 如果第二个参数有值，则先根据第二个参数生成zepto对象，然后再调用.find来获取，例如$(&#39;.item&#39;, &#39;#content&#39;)这种用法。find方法是zepto对象的一个函数，API中用法的介绍。
   */</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">$</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>
  <span class="token comment">// 情况3，以上两种情况都不是，则调用zepto.qsa来获取数据，后来聊这个方法的具体实现。qsa即querySelectAll的缩写</span>
  <span class="token keyword">else</span> dom <span class="token operator">=</span> zepto<span class="token punctuation">.</span><span class="token function">qsa</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> selector<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>selector</code> 参数是函数，例如 <code>$(function(){...})</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// If a function is given, call it when the DOM is ready</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这种用法也比较常见，意思是待dom加载完毕再执行函数。这个ready函数的具体实现后面会讲到，这里先知道意思即可。</p><ol start="4"><li><code>selector</code> 本身就是个zepto对象</li></ol><p>这种用法比较少，但是也不能避免，例如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这里传入的 a 本身就是个 zepto 对象了。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>源码中使用zepto.isZ来判断，如果是的话，直接就返回自身。zepto.isZ的实现很简单，看源码即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// If a Zepto collection is given, just return it</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>zepto<span class="token punctuation">.</span><span class="token function">isZ</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> selector
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>其他情况</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// normalize array if an array of nodes is given</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span> dom <span class="token operator">=</span> <span class="token function">compact</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>
  <span class="token comment">// Wrap DOM nodes.</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span>
    dom <span class="token operator">=</span> <span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">,</span> selector <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token comment">// If it&#39;s a html fragment, create nodes from it</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fragmentRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span>
    dom <span class="token operator">=</span> zepto<span class="token punctuation">.</span><span class="token function">fragment</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">,</span> selector <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token comment">// If there&#39;s a context, create a collection on that context first, and select</span>
  <span class="token comment">// nodes from there</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">$</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>
  <span class="token comment">// And last but no least, if it&#39;s a CSS selector, use it to select nodes.</span>
  <span class="token keyword">else</span> dom <span class="token operator">=</span> zepto<span class="token punctuation">.</span><span class="token function">qsa</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> selector<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>情况1</strong> <code>selector</code> 参数是数组，则通过一个 <code>compact</code> 处理一下赋值给 <code>dom</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// normalize array if an array of nodes is given</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span> dom <span class="token operator">=</span> <span class="token function">compact</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>情况2</strong> <code>selector</code> 参数是DOM节点，则将它作为数组赋值给 <code>dom</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Wrap DOM nodes.</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span>
  dom <span class="token operator">=</span> <span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">,</span> selector <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>剩余情况</strong> 其实在selector是字符串的时候就已经考虑到了，因此感觉这里多余了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// If it&#39;s a html fragment, create nodes from it</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fragmentRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span>
  dom <span class="token operator">=</span> zepto<span class="token punctuation">.</span><span class="token function">fragment</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">,</span> selector <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token comment">// If there&#39;s a context, create a collection on that context first, and select</span>
<span class="token comment">// nodes from there</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">$</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>
<span class="token comment">// And last but no least, if it&#39;s a CSS selector, use it to select nodes.</span>
<span class="token keyword">else</span> dom <span class="token operator">=</span> zepto<span class="token punctuation">.</span><span class="token function">qsa</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最终，赋值给dom的形式是一个数组。就像这段代码</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Wrap DOM nodes.</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span>
  dom <span class="token operator">=</span> <span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">,</span> selector <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="zepto-z-函数" tabindex="-1"><a class="header-anchor" href="#zepto-z-函数" aria-hidden="true">#</a> <code>Zepto.Z</code> 函数</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// \`$.zepto.Z\` swaps out the prototype of the given \`dom\` array</span>
<span class="token comment">// of nodes with \`$.fn\` and thus supplying all the Zepto functions</span>
<span class="token comment">// to the array. Note that \`__proto__\` is not supported on Internet</span>
<span class="token comment">// Explorer. This method can be overriden in plugins.</span>
zepto<span class="token punctuation">.</span><span class="token function-variable function">Z</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">dom<span class="token punctuation">,</span> selector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  dom <span class="token operator">=</span> dom <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  dom<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> $<span class="token punctuation">.</span>fn
  dom<span class="token punctuation">.</span>selector <span class="token operator">=</span> selector <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">return</span> dom
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中，<code>dom</code> 是一个数组，并且把它的隐式原型赋值 <code>$.fn</code> ，而这里的 <code>$.fn</code> 其实就是一个普通的js对象，里面包含了各种各样的方法。最新的 <code>zepto.Z</code> 实现上目前不一样。</p><p><code>Zepto.Z</code> 新的实现方案</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">Z</span><span class="token punctuation">(</span><span class="token parameter">dom<span class="token punctuation">,</span> selector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> i<span class="token punctuation">,</span> len <span class="token operator">=</span> dom <span class="token operator">?</span> dom<span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dom<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> len
  <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">=</span> selector <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \`$.zepto.Z\` swaps out the prototype of the given \`dom\` array</span>
<span class="token comment">// of nodes with \`$.fn\` and thus supplying all the Zepto functions</span>
<span class="token comment">// to the array. This method can be overridden in plugins.</span>

zepto<span class="token punctuation">.</span><span class="token function-variable function">Z</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">dom<span class="token punctuation">,</span> selector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Z</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> selector<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...很多属性...</span>
<span class="token punctuation">}</span>

zepto<span class="token punctuation">.</span><span class="token class-name">Z</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Z</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> $<span class="token punctuation">.</span>fn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="回顾" tabindex="-1"><a class="header-anchor" href="#回顾" aria-hidden="true">#</a> 回顾</h2><img src="`+t+`"><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Zepto <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> $<span class="token punctuation">,</span>
        zepto <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    
    <span class="token comment">// ...省略代码...</span>
    
    zepto<span class="token punctuation">.</span><span class="token function-variable function">Z</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dom<span class="token punctuation">,</span> selector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      dom <span class="token operator">=</span> dom <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      dom<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> $<span class="token punctuation">.</span>fn
      dom<span class="token punctuation">.</span>selector <span class="token operator">=</span> selector <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>
      <span class="token keyword">return</span> dom
    <span class="token punctuation">}</span>
    
    zepto<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> dom
        
        <span class="token comment">// 针对参数情况，分别对dom赋值</span>
        
        <span class="token comment">// 最终调用 zepto.Z 返回的数据</span>
        <span class="token keyword">return</span> zepto<span class="token punctuation">.</span><span class="token constant">Z</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> selector<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token function-variable function">$</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> zepto<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    $<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token comment">// 里面有若干个工具函数</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// ...省略代码...</span>
    
    <span class="token keyword">return</span> $
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>Zepto <span class="token operator">=</span> Zepto
window<span class="token punctuation">.</span>$ <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>$ <span class="token operator">=</span> Zepto<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),c=[o];function i(l,u){return s(),a("div",null,c)}const d=n(p,[["render",i],["__file","032701.html.vue"]]);export{d as default};
