import{_ as l,r as c,o as i,c as u,a as n,d as a,w as e,b as s,e as o}from"./app-6e895db1.js";const r={},k=n("h2",{id:"解释下变量提升",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#解释下变量提升","aria-hidden":"true"},"#"),s(" 解释下变量提升？")],-1),d=n("p",null,"JavaScript引擎的⼯作⽅式是，先解析代码，获取所有被声明的变量，然后再⼀⾏⼀⾏地运⾏。这造成的结果，就是所 有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升（hoisting）。",-1),v=n("h2",{id:"一段javascript代码是如何执行的",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一段javascript代码是如何执行的","aria-hidden":"true"},"#"),s(" ⼀段JavaScript代码是如何执⾏的？")],-1),m=o(`<h2 id="理解闭包吗" tabindex="-1"><a class="header-anchor" href="#理解闭包吗" aria-hidden="true">#</a> 理解闭包吗？</h2><h3 id="闭包是什么" tabindex="-1"><a class="header-anchor" href="#闭包是什么" aria-hidden="true">#</a> 闭包是什么</h3><p>MDN的解释：闭包是函数和声明该函数的词法环境的组合。 按照我的理解就是：闭包是指有权访问另一个函数作用域中的变量的函数，内层函数会保存并共享外层函数的OA。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> <span class="token function-variable function">indexFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">++</span>index
  <span class="token keyword">return</span> indexFn
<span class="token punctuation">}</span>
<span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="闭包的作用" tabindex="-1"><a class="header-anchor" href="#闭包的作用" aria-hidden="true">#</a> 闭包的作⽤?</h3><p>闭包最⼤的作⽤就是隐藏变量，闭包的⼀⼤特性就是内部函数总是可以访问其所在的外部函数中声明的参数和变量，即使在其外部函数被返回（寿命终结）了之后。</p><p>基于此特性，JavaScript可以实现私有变量、特权变量、储存变量等。</p><p>我们就以私有变量举例，私有变量的实现⽅法很多，有靠约定的（变量名前加_）,有靠 Proxy 代理的，也有靠Symbol这种新数据类型的。</p><p>Proxy 实现私有变量：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> protectHandler <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// target为目标对象， key为成员变量</span>
    <span class="token function">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 调用isProtected判断是否合法</span>
      <span class="token function">isProtected</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">// 如果合法会运行此步，返回目标对象中的成员变量</span>
      <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> 
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// value为要给成员变量设置的值</span>
    <span class="token function">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">isProtected</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&#39;set&#39;</span><span class="token punctuation">)</span>
        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token comment">//成功返回true</span>
<span class="token punctuation">}</span>
<span class="token comment">// 判断是否合法的函数</span>
<span class="token keyword">function</span> <span class="token function">isProtected</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invalid attempt to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>action<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> private &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; property</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> yourObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>yourObj<span class="token punctuation">,</span> protectHandler<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="javascript的作用域链理解吗" tabindex="-1"><a class="header-anchor" href="#javascript的作用域链理解吗" aria-hidden="true">#</a> JavaScript的作⽤域链理解吗？</h2>`,11),b=o('<h2 id="es6模块与commonjs模块有什么区别" tabindex="-1"><a class="header-anchor" href="#es6模块与commonjs模块有什么区别" aria-hidden="true">#</a> ES6模块与CommonJS模块有什么区别？</h2><p>ES6 Module和CommonJS模块的区别：</p><ul><li>CommonJS 是对模块的浅拷⻉；ES6 Module 是对模块的引⽤，即 ES6 Module 只存只读，不能改变其值，具体点就是指针指向不能变，类似const</li><li>import的接⼝是 read-only（只读状态），不能修改其变量值，即不能修改其变量的指针指向，但是可以改变变量内部指针指向；可以对 commonJS 对重新赋值（改变指针指向），但是对 ES6 Module 赋值会编译报错。</li></ul><p>ES6 Module 和 CommonJS 模块的共同点：</p><ul><li>CommonJS 和 ES6 Module 都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。</li></ul><h2 id="js有哪些类型" tabindex="-1"><a class="header-anchor" href="#js有哪些类型" aria-hidden="true">#</a> js有哪些类型？</h2><p>JavaScript的类型分为两⼤类，⼀类是原始类型，⼀类是复杂(引⽤）类型。</p><p>原始类型:</p>',8),h=n("li",null,"boolean",-1),f=n("li",null,"null",-1),y=n("li",null,"undefined",-1),g=n("li",null,"number",-1),w=n("li",null,"string",-1),_=n("li",null,"symbol",-1),j={href:"https://es6.ruanyifeng.com/?search=BigInt&x=0&y=0#docs/number#BigInt-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"复杂类型:",-1),E=n("ul",null,[n("li",null,"Object")],-1),A=n("h2",{id:"null-与-undefined-的区别是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#null-与-undefined-的区别是什么","aria-hidden":"true"},"#"),s(" null 与 undefined 的区别是什么？")],-1),P=n("p",null,"null 表示为空，代表此处不应该有值的存在，⼀个对象可以是 null，代表是个空对象，⽽ null 本身也是对象。",-1),S=n("p",null,"undefined 表示『不存在』，JavaScript 是⼀⻔动态类型语⾔，成员除了表示存在的空值外，还有可能根本就不存在（因为存不存在只在运⾏期才知道），这就是 undefined 的意义所在。",-1),B=n("h2",{id:"精度问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#精度问题","aria-hidden":"true"},"#"),s(" 精度问题")],-1),J={href:"https://segmentfault.com/a/1190000018685770",target:"_blank",rel:"noopener noreferrer"},M={href:"https://es6.ruanyifeng.com/?search=BigInt&x=0&y=0#docs/number#BigInt-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.jb51.net/article/179419.htm",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.cnblogs.com/coce/p/9405121.html",target:"_blank",rel:"noopener noreferrer"},I=n("h2",{id:"类型转换原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#类型转换原理","aria-hidden":"true"},"#"),s(" 类型转换原理")],-1),F={href:"https://blog.csdn.net/itcast_cn/article/details/82887895",target:"_blank",rel:"noopener noreferrer"},N=n("h2",{id:"原型链",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原型链","aria-hidden":"true"},"#"),s(" 原型链")],-1),L=o(`<h2 id="如何判断是否是数组" tabindex="-1"><a class="header-anchor" href="#如何判断是否是数组" aria-hidden="true">#</a> 如何判断是否是数组？</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// es6中加⼊了新的判断⽅法</span>
<span class="token keyword">if</span>（Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>）<span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token comment">// 更兼容的办法</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span><span class="token punctuation">{</span> 
  Array<span class="token punctuation">.</span><span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">&#39;[object Array]&#39;</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="谈一谈你对this的了解" tabindex="-1"><a class="header-anchor" href="#谈一谈你对this的了解" aria-hidden="true">#</a> 谈⼀谈你对this的了解？</h2><p>this的指向不是在编写时确定的,⽽是在执⾏时确定的，同时，this不同的指向在于遵循了⼀定的规则。 ⾸先，在默认情况下，this是指向全局对象的，⽐如在浏览器就是指向window。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>name <span class="token operator">=</span> <span class="token string">&quot;Bale&quot;</span><span class="token punctuation">;</span> 
<span class="token keyword">function</span> <span class="token function">sayName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&quot;Bale&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，如果函数被调⽤的位置存在上下⽂对象时，那么函数是被隐式绑定的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Messi&quot;</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">f</span><span class="token operator">:</span> f 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//被调⽤的位置恰好被对象obj拥有，因此结果是Messi </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次，显示改变this指向，常⻅的⽅法就是call、apply、bind 以bind为例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Messi&quot;</span><span class="token punctuation">,</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bale&quot;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Messi ,由于bind将obj绑定到f函数上后返回⼀个新函数,因此需要再在后⾯加上括号进⾏执⾏,这是bind与apply和call的 区别 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，也是优先级最⾼的绑定 new 绑定。</p><p>⽤ new 调⽤⼀个构造函数，会创建⼀个新对象, 在创造这个新对象的过程中,新对象会⾃动绑定到Person对象的this上， 那么 this ⾃然就指向这个新对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> 
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Messi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Messi </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>绑定优先级: new绑定 &gt; 显式绑定 &gt;隐式绑定 &gt;默认绑定</p></blockquote><h2 id="那么箭头函数的this指向哪里" tabindex="-1"><a class="header-anchor" href="#那么箭头函数的this指向哪里" aria-hidden="true">#</a> 那么箭头函数的this指向哪⾥？</h2><p>箭头函数不同于传统JavaScript中的函数,箭头函数并没有属于⾃⼰的this,它的所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值,并且由于没有属于⾃⼰的this,⽽箭头函数是不会被new调⽤的，这个所谓的this也不会被改变.</p><p>我们可以⽤Babel理解⼀下箭头函数:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ES6 </span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> 
  <span class="token function">getArrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> obj<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转化后</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ES5，由 Babel 转译 </span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">getArrow</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">getArrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_this <span class="token operator">===</span> obj<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="async-await是什么" tabindex="-1"><a class="header-anchor" href="#async-await是什么" aria-hidden="true">#</a> async/await是什么？</h2><p>async 函数，就是 Generator 函数的语法糖，它建⽴在Promises上，并且与所有现有的基于Promise的API兼容。</p><ol><li>Async—声明⼀个异步函数(async function someName(){...})</li><li>⾃动将常规函数转换成Promise，返回值也是⼀个Promise对象</li><li>只有async函数内部的异步操作执⾏完，才会执⾏then⽅法指定的回调函数</li><li>异步函数内部可以使⽤await <ol><li>Await—暂停异步的功能执⾏(var result = await someAsyncCall()😉</li><li>放置在Promise调⽤之前，await强制其他代码等待，直到Promise完成并返回结果</li><li>只能与Promise⼀起使⽤，不适⽤与回调</li><li>只能在async函数内部使⽤</li></ol></li></ol><h2 id="async-await相比于promise的优势" tabindex="-1"><a class="header-anchor" href="#async-await相比于promise的优势" aria-hidden="true">#</a> async/await相⽐于Promise的优势？</h2><ul><li>代码读起来更加同步，Promise虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担</li><li>Promise传递中间值⾮常麻烦，⽽async/await⼏乎是同步的写法，⾮常优雅</li><li>错误处理友好，async/await可以⽤成熟的try/catch，Promise的错误捕获⾮常冗余</li><li>调试友好，Promise的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀ 个.then代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪 同步代码的『每⼀步』。</li></ul><h2 id="javascript的参数是按照什么方式传递的" tabindex="-1"><a class="header-anchor" href="#javascript的参数是按照什么方式传递的" aria-hidden="true">#</a> JavaScript的参数是按照什么⽅式传递的？</h2><h3 id="基本类型传递方式" tabindex="-1"><a class="header-anchor" href="#基本类型传递方式" aria-hidden="true">#</a> 基本类型传递⽅式</h3><p>由于js中存在复杂类型和基本类型,对于基本类型⽽⾔,是按值传递的.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> 
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然在函数 test 中 a 被修改,并没有有影响到 外部 a 的值,基本类型是按值传递的.</p><h3 id="复杂类型按引用传递" tabindex="-1"><a class="header-anchor" href="#复杂类型按引用传递" aria-hidden="true">#</a> 复杂类型按引⽤传递?</h3><p>我们将外部 a 作为⼀个对象传⼊ test 函数.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> x<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 10, b: 2 } </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 10, b: 2 } </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到,在函数体内被修改的 a 对象也同时影响到了外部的 a 对象,可⻅复杂类型是按引⽤传递的. 可是如果再做⼀个实验:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1, b: 2 } </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>外部的 a 并没有被修改,如果是按引⽤传递的话,由于共享同⼀个堆内存, a 在外部也会表现为 10 才对. 此时的复杂类型 同时表现出了 按值传递 和 按引⽤传递 的特性.</p><h3 id="按共享传递" tabindex="-1"><a class="header-anchor" href="#按共享传递" aria-hidden="true">#</a> 按共享传递</h3><p>复杂类型之所以会产⽣这种特性,原因就是在传递过程中,对象 a 先产⽣了⼀个 副本a ,这个 副本a 并不是深克隆得到的 副 本a , 副本a 地址同样指向对象 a 指向的堆内存.</p><p>因此在函数体中修改 x=10 只是修改了 副本a , a 对象没有变化. 但是如果修改了 x.a=10 是修改了两者指向的同⼀堆内 存,此时对象 a 也会受到影响.</p><p>有⼈讲这种特性叫做 <strong>传递引⽤</strong>,也有⼀种说法叫做 <strong>按共享传递</strong>.</p><h2 id="聊一聊如何在javascript中实现不可变对象" tabindex="-1"><a class="header-anchor" href="#聊一聊如何在javascript中实现不可变对象" aria-hidden="true">#</a> 聊⼀聊如何在JavaScript中实现不可变对象？</h2><p>实现不可变数据有三种主流的⽅法</p><ol><li>深克隆，但是深克隆的性能⾮常差，不适合⼤规模使⽤</li><li>Immutable.js，Immutable.js是⾃成⼀体的⼀套数据结构，性能良好，但是需要学习额外的API</li><li>immer，利⽤Proxy特性，⽆需学习额外的api，性能良好</li></ol>`,42),$={href:"https://www.ucloud.cn/yun/89779.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://segmentfault.com/a/1190000008780076",target:"_blank",rel:"noopener noreferrer"},D={href:"https://immutable-js.github.io/immutable-js/",target:"_blank",rel:"noopener noreferrer"},V=n("h2",{id:"javascript的基本类型和复杂类型是储存在哪里的",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#javascript的基本类型和复杂类型是储存在哪里的","aria-hidden":"true"},"#"),s(" JavaScript的基本类型和复杂类型是储存在哪⾥的？")],-1),z=n("li",null,[n("p",null,"基本类型储存在栈中，但是⼀旦被闭包引⽤则成为常住内存，会储存在内存堆中。")],-1),H=n("li",null,[n("p",null,"复杂类型会储存在内存堆中。")],-1),R={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management",target:"_blank",rel:"noopener noreferrer"},G=n("h2",{id:"讲讲javascript垃圾回收是怎么做的",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#讲讲javascript垃圾回收是怎么做的","aria-hidden":"true"},"#"),s(" 讲讲JavaScript垃圾回收是怎么做的？")],-1),T={href:"https://www.cnblogs.com/starof/p/6594904.html",target:"_blank",rel:"noopener noreferrer"},W=o(`<h2 id="最简单的一个-event-bus" tabindex="-1"><a class="header-anchor" href="#最简单的一个-event-bus" aria-hidden="true">#</a> 最简单的一个 Event Bus</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">EventBus</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">$on</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">$emit</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>type<span class="token punctuation">]</span>
    events<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">event</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">$off</span> <span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>type<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 测试</span>
<span class="token keyword">const</span> eb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

eb<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;bus1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bus1&#39;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

eb<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;bus1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bus1&#39;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

eb<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;bus1&#39;</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="instanceof-原理" tabindex="-1"><a class="header-anchor" href="#instanceof-原理" aria-hidden="true">#</a> instanceof 原理</h2><p>其实 instanceof 主要的实现原理就是只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false，告诉我们左边变量并非是右边变量的实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">new_instanceof</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> rightProto <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype
  <span class="token keyword">let</span> leftProto <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftProto <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftProto <span class="token operator">===</span> rightProto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    leftProto <span class="token operator">=</span> leftProto<span class="token punctuation">.</span>__proto__
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">new_instanceof</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> Child<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">new_instanceof</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">new_instanceof</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> Object<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="矩阵循环打印" tabindex="-1"><a class="header-anchor" href="#矩阵循环打印" aria-hidden="true">#</a> 矩阵循环打印</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">print</span> <span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> down <span class="token operator">=</span> m<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>

  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>up <span class="token operator">&lt;=</span> down <span class="token operator">||</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token function">cicle</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> up<span class="token operator">++</span><span class="token punctuation">,</span> down<span class="token operator">--</span><span class="token punctuation">,</span> left<span class="token operator">++</span><span class="token punctuation">,</span> right<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">cicle</span> <span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> up<span class="token punctuation">,</span> down<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>up<span class="token punctuation">,</span> down<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment">// top &amp; bottom</span>
  <span class="token keyword">let</span> topArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> bottomArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment">// left &amp; right</span>
  <span class="token keyword">const</span> leftArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> rightArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token comment">// 获取上下两行的数据</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>up <span class="token operator">&lt;</span> down<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> firstLine <span class="token operator">=</span> m<span class="token punctuation">[</span>up<span class="token punctuation">]</span>
    <span class="token keyword">const</span> lastLine <span class="token operator">=</span> m<span class="token punctuation">[</span>down<span class="token punctuation">]</span>
    <span class="token comment">// + 1 是为了可以取到最后一个值</span>
    topArr <span class="token operator">=</span> firstLine<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment">// reverse() 是因为底部行是从后往前走的</span>
    bottomArr <span class="token operator">=</span> lastLine<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 获取左右两列的数据</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> up <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> down<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      leftArr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
      rightArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> topArr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>rightArr<span class="token punctuation">,</span> bottomArr<span class="token punctuation">,</span> leftArr<span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 以下是处理边界情况</span>

  <span class="token comment">// 处理 [[1, 2, 3]] 这种情况</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>up <span class="token operator">===</span> down <span class="token operator">&amp;&amp;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 处理 [[1]] 这种情况</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>up <span class="token operator">===</span> down <span class="token operator">&amp;&amp;</span>left <span class="token operator">===</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>up<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function K(Q,U){const p=c("RouterLink"),t=c("ExternalLinkIcon");return i(),u("div",null,[k,d,v,n("p",null,[a(p,{to:"/views/frontEnd/FEMainPoint/031301.html"},{default:e(()=>[s("JS 运行机制")]),_:1})]),m,n("p",null,[a(p,{to:"/views/frontEnd/js/2019/082801.html#%E9%A2%84%E7%BC%96%E8%AF%91%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE"},{default:e(()=>[s("作⽤域链")]),_:1})]),b,n("ul",null,[h,f,y,g,w,_,n("li",null,[s("⼀个没有正式发布但即将被加⼊标准的原始类型 "),n("a",j,[s("BigInt"),a(t)])])]),x,E,A,P,S,B,n("ul",null,[n("li",null,[n("a",J,[s("关于js小数浮点数操作出现的精度问题的原因以及解决方法"),a(t)])]),n("li",null,[n("a",M,[s("BigInt 数据类型"),a(t)])]),n("li",null,[n("a",C,[s("详解JavaScript中精度失准问题及解决方法"),a(t)])]),n("li",null,[n("a",q,[s("js中精度问题以及解决方案"),a(t)])])]),I,n("p",null,[n("a",F,[s("js面试题大坑——隐式类型转换"),a(t)])]),N,n("ul",null,[n("li",null,[a(p,{to:"/views/frontEnd/FEMainPoint/030306.html"},{default:e(()=>[s("原型链")]),_:1})]),n("li",null,[a(p,{to:"/views/frontEnd/FEMainPoint/030307.html#%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7"},{default:e(()=>[s("面向对象")]),_:1})])]),L,n("ul",null,[n("li",null,[n("a",$,[s("不可变数据"),a(t)])]),n("li",null,[n("a",O,[s("从JS对象开始，谈一谈“不可变数据”和函数式编程"),a(t)])]),n("li",null,[n("a",D,[s("immutable-js"),a(t)])])]),V,n("ul",null,[z,H,n("li",null,[n("p",null,[n("a",R,[s("内存管理"),a(t)])])])]),G,n("ul",null,[n("li",null,[n("a",T,[s("javascript垃圾回收"),a(t)])])]),W])}const Y=l(r,[["render",K],["__file","js.html.vue"]]);export{Y as default};
