import{_ as t,r as e,o as p,c as o,a as n,b as c,d as i,e as s}from"./app-6e895db1.js";const l={},u=s(`<h2 id="const-定义的变量的属性是否可修改-为什么" tabindex="-1"><a class="header-anchor" href="#const-定义的变量的属性是否可修改-为什么" aria-hidden="true">#</a> const 定义的变量的属性是否可修改？为什么</h2><p>可以。</p><p>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。</p><p>但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。</p><p>因此，将一个对象声明为常量必须非常小心。</p><h2 id="promise对象有三种状态" tabindex="-1"><a class="header-anchor" href="#promise对象有三种状态" aria-hidden="true">#</a> Promise对象有三种状态</h2><p>pending（进行中）、fulfilled（已成功）和rejected（已失败）。</p><h2 id="请将下列b函数进行修改-保证每次调用a都能-1-考闭包" tabindex="-1"><a class="header-anchor" href="#请将下列b函数进行修改-保证每次调用a都能-1-考闭包" aria-hidden="true">#</a> 请将下列b函数进行修改，保证每次调用a都能+1（考闭包）</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//本文由@IT·平头哥联盟-首席填坑官∙苏南分享,如有错误，欢迎留言</span>
<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
		a<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> a<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span>
<span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span>
<span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js有哪些基本数据类型" tabindex="-1"><a class="header-anchor" href="#js有哪些基本数据类型" aria-hidden="true">#</a> js有哪些基本数据类型</h2><ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Number</li><li>String</li><li>Symbol :（ECMAScript 6 新定义 ，Symbol 生成一个全局唯一、表示独一无二的值）</li><li>Object :（Array、Function、Object）</li></ul><h2 id="千位分割符" tabindex="-1"><a class="header-anchor" href="#千位分割符" aria-hidden="true">#</a> 千位分割符</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//方法1:</span>
<span class="token keyword">var</span> <span class="token function-variable function">separator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&#39;0.00&#39;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> str <span class="token operator">&amp;&amp;</span> str
		<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d)(?=(\\d{3})+\\.)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$0<span class="token punctuation">,</span> $1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> $1 <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">separator</span><span class="token punctuation">(</span><span class="token number">386485473.88</span><span class="token punctuation">)</span> <span class="token comment">//&quot;386,485,473.88&quot;</span>

<span class="token comment">//方法2：</span>
<span class="token punctuation">(</span><span class="token number">386485473.88</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&#39;en-US&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// &quot;386,485,473.88&quot; 由 (sRect)补充</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),r={href:"https://www.jb51.net/article/61585.htm",target:"_blank",rel:"noopener noreferrer"},d=s('<h2 id="js的-for-跟for-in-循环它们之间的区别" tabindex="-1"><a class="header-anchor" href="#js的-for-跟for-in-循环它们之间的区别" aria-hidden="true">#</a> js的 for 跟for in 循环它们之间的区别？</h2><ul><li>遍历数组时的异同： <code>for</code>循环 数组下标的typeof类型:<code>number</code>, <code>for in</code> 循环数组下标的typeof类型:<code>string</code>;</li><li>遍历对象时的异同：f<code>or</code>循环 无法用于循环对象，获取不到o<code>bj.length</code>; <code>for in</code> 循环遍历对象的属性时，原型链上的所有属性都将被访问，解决方案：使用<code>hasOwnProperty</code>方法过滤或<code>Object.keys</code>会返回自身可枚举属性组成的数组。</li></ul>',2);function k(m,v){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[c("其他办法"),i(a)])])]),d])}const f=t(l,[["render",k],["__file","032201.html.vue"]]);export{f as default};
