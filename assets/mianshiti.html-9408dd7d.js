import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-6e895db1.js";const i={},u=e(`<h2 id="今日头条面试" tabindex="-1"><a class="header-anchor" href="#今日头条面试" aria-hidden="true">#</a> 今日头条面试</h2><h3 id="一面" tabindex="-1"><a class="header-anchor" href="#一面" aria-hidden="true">#</a> 一面</h3><h4 id="_1-script-refer-和-async-的区别" tabindex="-1"><a class="header-anchor" href="#_1-script-refer-和-async-的区别" aria-hidden="true">#</a> 1. script refer 和 async 的区别</h4><h4 id="_2-防抖和节流" tabindex="-1"><a class="header-anchor" href="#_2-防抖和节流" aria-hidden="true">#</a> 2. 防抖和节流</h4><h4 id="_3-线上性能自动分析-业务错误自动检测" tabindex="-1"><a class="header-anchor" href="#_3-线上性能自动分析-业务错误自动检测" aria-hidden="true">#</a> 3. 线上性能自动分析，业务错误自动检测</h4><h4 id="_4-vue3-0-的-compositionapi-或者说是-react-的-hooks-语法-与传统的-options-语法的对比" tabindex="-1"><a class="header-anchor" href="#_4-vue3-0-的-compositionapi-或者说是-react-的-hooks-语法-与传统的-options-语法的对比" aria-hidden="true">#</a> 4. vue3.0 的 compositionAPI （或者说是 react 的 hooks 语法）与传统的 options 语法的对比</h4><h4 id="_5-typescript-的优缺点" tabindex="-1"><a class="header-anchor" href="#_5-typescript-的优缺点" aria-hidden="true">#</a> 5. typescript 的优缺点</h4><h4 id="_6-函数柯里化" tabindex="-1"><a class="header-anchor" href="#_6-函数柯里化" aria-hidden="true">#</a> 6. 函数柯里化</h4><details class="custom-container details"><summary class="custom-container-title">DETAILS</summary><p><strong>题目</strong></p><p>总共参数&gt;=3,直接返回结果 如果&lt;3,一直链式调用</p><p>add(2,3,4)=9 add(2,3,4,5)=14 add(2)(3,4)=9 add(2)(3)(4)=9 add(2,3)(4)=9</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> prev <span class="token operator">+</span> next
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>agms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>agms<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="二面" tabindex="-1"><a class="header-anchor" href="#二面" aria-hidden="true">#</a> 二面</h3><h4 id="_1-不定宽不定高的矩形垂直居中-大小由内容撑开" tabindex="-1"><a class="header-anchor" href="#_1-不定宽不定高的矩形垂直居中-大小由内容撑开" aria-hidden="true">#</a> 1. 不定宽不定高的矩形垂直居中，大小由内容撑开</h4><details class="custom-container details"><summary class="custom-container-title">DETAILS</summary><p><strong>布局</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inner<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法1</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.wrapper</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.inner</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法2</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.wrapper</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.inner</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 如果不加入这一行代码，横向是100%，而不是被内容撑开 */</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法3</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.wrapper</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.inner</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="_2-link-preload-和-prefetch-的区别" tabindex="-1"><a class="header-anchor" href="#_2-link-preload-和-prefetch-的区别" aria-hidden="true">#</a> 2. link preload 和 prefetch 的区别</h4>`,13),r={href:"https://www.cnblogs.com/xiaohuochai/p/9183874.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.zhangxinxu.com/wordpress/2019/06/html-a-link-rel/",target:"_blank",rel:"noopener noreferrer"},k=e('<h4 id="_3-this-指向问题" tabindex="-1"><a class="header-anchor" href="#_3-this-指向问题" aria-hidden="true">#</a> 3. this 指向问题</h4><h4 id="_4-值类型和引用类型的区别" tabindex="-1"><a class="header-anchor" href="#_4-值类型和引用类型的区别" aria-hidden="true">#</a> 4. 值类型和引用类型的区别</h4><h4 id="_5-false" tabindex="-1"><a class="header-anchor" href="#_5-false" aria-hidden="true">#</a> 5. [] == false</h4><h4 id="_6-构造函数中出现-return-语句-分别为-对象、null、普通类型时的影响" tabindex="-1"><a class="header-anchor" href="#_6-构造函数中出现-return-语句-分别为-对象、null、普通类型时的影响" aria-hidden="true">#</a> 6. 构造函数中出现 return 语句，分别为 对象、null、普通类型时的影响</h4><h4 id="_7-多个同步任务、异步任务的打印顺序" tabindex="-1"><a class="header-anchor" href="#_7-多个同步任务、异步任务的打印顺序" aria-hidden="true">#</a> 7. 多个同步任务、异步任务的打印顺序</h4><h4 id="_8-z-index-谁距离屏幕更近-样式层级问题" tabindex="-1"><a class="header-anchor" href="#_8-z-index-谁距离屏幕更近-样式层级问题" aria-hidden="true">#</a> 8. z-index 谁距离屏幕更近，样式层级问题</h4>',6),v={href:"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/",target:"_blank",rel:"noopener noreferrer"},m=e(`<h4 id="_9-用-vue-绘制一个-modal-组件-自定义-v-model" tabindex="-1"><a class="header-anchor" href="#_9-用-vue-绘制一个-modal-组件-自定义-v-model" aria-hidden="true">#</a> 9. 用 Vue 绘制一个 Modal 组件（自定义 v-model）</h4><details class="custom-container details"><summary class="custom-container-title">DETAILS</summary><p><strong>题目</strong></p><p>使用场景: 用 Vue 实现 Modal 组件：</p><ol><li>实现 open 的双向绑定，假设已经有show(）hide() 方法</li><li>接收一些 props， 例如：title</li><li>点击按钮的时候，触发事件 on-ok</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@on-click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>open= true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>开始<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modal</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>open<span class="token punctuation">&quot;</span></span> <span class="token attr-name">tiltle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@on-ok</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handler<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> content <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modal</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrapper<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>open<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn-ok<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>okClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>ok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">event</span><span class="token operator">:</span> <span class="token string">&#39;change&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">okClick</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="三面" tabindex="-1"><a class="header-anchor" href="#三面" aria-hidden="true">#</a> 三面</h3>`,3),h=n("li",null,"两指按压，以按压的中心点来进行方法的实现",-1),b=n("li",null,"cookie 和 Storage 的区别，怎么实现 Storage 的有效期",-1),g=n("li",null,"手写bind函数",-1),f=n("li",null,"new的过程，原型链，ES6和ES5继承的区别",-1),_=n("li",null,"xss和csrf，token是怎么实现的",-1),y={href:"https://www.jianshu.com/p/26f5d5910fec",target:"_blank",rel:"noopener noreferrer"},w=e(`<h2 id="跟谁学" tabindex="-1"><a class="header-anchor" href="#跟谁学" aria-hidden="true">#</a> 跟谁学</h2><h3 id="一面-1" tabindex="-1"><a class="header-anchor" href="#一面-1" aria-hidden="true">#</a> 一面</h3><h4 id="_1-async-await" tabindex="-1"><a class="header-anchor" href="#_1-async-await" aria-hidden="true">#</a> 1. async await</h4><details class="custom-container details"><summary class="custom-container-title">DETAILS</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 期待每隔两秒输出p1、p2、p3，最后输出&#39;done&#39;
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">p1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;p1&#39;</span><span class="token punctuation">)</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">p2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;p2&#39;</span><span class="token punctuation">)</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">p3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;p3&#39;</span><span class="token punctuation">)</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token comment">// &#39;done&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token parameter">tasks</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tasks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">await</span> tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="_2-闭包实现累加" tabindex="-1"><a class="header-anchor" href="#_2-闭包实现累加" aria-hidden="true">#</a> 2. 闭包实现累加</h4><details class="custom-container details"><summary class="custom-container-title">DETAILS</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 闭包实现累加
 * 有参数时相加，无参数时输出最终结果
 * add(1)() // =&gt; 1
 * add(1)(2)(3)(4)() //  =&gt; 10
 */</span>

<span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
    
  <span class="token keyword">function</span> <span class="token function">getVal</span> <span class="token punctuation">(</span><span class="token parameter">subNum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>subNum <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sum<span class="token operator">+=</span>subNum
      <span class="token keyword">return</span> getVal
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum<span class="token operator">+=</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> getVal
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="_3-git-rebase-和-git-merge-区别" tabindex="-1"><a class="header-anchor" href="#_3-git-rebase-和-git-merge-区别" aria-hidden="true">#</a> 3. git rebase 和 git merge 区别</h4>`,7),x={href:"https://www.jianshu.com/p/6960811ac89c",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.jianshu.com/p/4a8f4af4e803",target:"_blank",rel:"noopener noreferrer"},M=n("h4",{id:"_4-jsx-和-template-区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-jsx-和-template-区别","aria-hidden":"true"},"#"),s(" 4. jsx 和 template 区别")],-1),j={href:"https://www.cnblogs.com/lvonve/p/12470666.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/vuejs/jsx#installation",target:"_blank",rel:"noopener noreferrer"},E=e(`<h4 id="_5-proxy-为什么比-object-definpropety" tabindex="-1"><a class="header-anchor" href="#_5-proxy-为什么比-object-definpropety" aria-hidden="true">#</a> 5. proxy 为什么比 Object.definPropety</h4><h2 id="作业帮" tabindex="-1"><a class="header-anchor" href="#作业帮" aria-hidden="true">#</a> 作业帮</h2><h3 id="一面-2" tabindex="-1"><a class="header-anchor" href="#一面-2" aria-hidden="true">#</a> 一面</h3><ol><li>生命周期</li><li>this 指向</li><li>同步异步宏任务微任务</li><li>合并有序数组元素（时间复杂度要求O(m+n)）例如：给定的两个数组为[1, 5]和[2, 5, 6, 8]，函数返回[1, 2, 5, 5, 6, 8]。</li><li>交错合并数组（时间复杂度要求O(m+n)）。 例如：给定的两个列表为[a, B]和[1, 2, 3]，函数返回[a, 1, B, 2, 3]。</li><li>判断一个dom节点是否为另一个dom节点的祖先</li><li>手动实现函数截流</li></ol><h3 id="二面-1" tabindex="-1"><a class="header-anchor" href="#二面-1" aria-hidden="true">#</a> 二面</h3><h4 id="_1-订阅发布模式-简单实现" tabindex="-1"><a class="header-anchor" href="#_1-订阅发布模式-简单实现" aria-hidden="true">#</a> 1. 订阅发布模式，简单实现</h4><h4 id="_2-闭包" tabindex="-1"><a class="header-anchor" href="#_2-闭包" aria-hidden="true">#</a> 2. 闭包</h4><h4 id="_3-1-二叉树" tabindex="-1"><a class="header-anchor" href="#_3-1-二叉树" aria-hidden="true">#</a> 3-1. 二叉树</h4><h4 id="_3-2-输入为一个整形数组-数组里有正数也有负数-数组中连续的一个或者多个整数组成一个子数组-每个连续子数组都有一个和。求所有连续子数组和的最大值。-1-7-6-9-10-2-3-4-5-7-0-1-23" tabindex="-1"><a class="header-anchor" href="#_3-2-输入为一个整形数组-数组里有正数也有负数-数组中连续的一个或者多个整数组成一个子数组-每个连续子数组都有一个和。求所有连续子数组和的最大值。-1-7-6-9-10-2-3-4-5-7-0-1-23" aria-hidden="true">#</a> 3-2. 输入为一个整形数组，数组里有正数也有负数，数组中连续的一个或者多个整数组成一个子数组，每个连续子数组都有一个和。求所有连续子数组和的最大值。[1,7,-6,9,-10,2,3,4,5,-7,0,-1,23,.........]</h4><h4 id="_4-123456789-123-456-789" tabindex="-1"><a class="header-anchor" href="#_4-123456789-123-456-789" aria-hidden="true">#</a> 4. 123456789-&gt;123,456,789</h4><h2 id="美团" tabindex="-1"><a class="header-anchor" href="#美团" aria-hidden="true">#</a> 美团</h2><h3 id="二面-2" tabindex="-1"><a class="header-anchor" href="#二面-2" aria-hidden="true">#</a> 二面</h3><ol><li>一个请求，请求失败后最多重复三次</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// function retry (fn, count) {</span>
<span class="token comment">//   fn().then(res =&gt; {</span>
<span class="token comment">//     return Promise.resolve(res)</span>
<span class="token comment">//   }).catch(err =&gt; {</span>
<span class="token comment">//     if (--count &gt; -1) {</span>
<span class="token comment">//       retry(fn, count)</span>
<span class="token comment">//     } else {</span>
<span class="token comment">//       console.log(&#39;请求失败&#39;)</span>
<span class="token comment">//     }</span>
<span class="token comment">//   })</span>
<span class="token comment">// }</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">retry</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>count <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">retry</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> count<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;请求失败&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">retry</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三面-1" tabindex="-1"><a class="header-anchor" href="#三面-1" aria-hidden="true">#</a> 三面</h3>`,15),P=n("p",null,"MVC 和 MVVM",-1),S={href:"https://www.bilibili.com/video/BV1Xf4y1m7x5?from=search&seid=15602997052924417903",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.bilibili.com/video/BV1S5411s7Lc",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.zhihu.com/question/310674885",target:"_blank",rel:"noopener noreferrer"},T={href:"http://www.ruanyifeng.com/blog/2007/11/mvc.html",target:"_blank",rel:"noopener noreferrer"},L={href:"http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.jianshu.com/p/7398ec36d591",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.cnblogs.com/JustRun1983/p/3679827.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.cnblogs.com/JustRun1983/p/3727560.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://www.jianshu.com/p/6a86f7fdc0cb",target:"_blank",rel:"noopener noreferrer"},A={href:"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller",target:"_blank",rel:"noopener noreferrer"},R={href:"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel",target:"_blank",rel:"noopener noreferrer"},J=e(`<li><p>递归实现数组的反转</p><blockquote><ol><li>首先是终止条件</li><li>将本次的执行结果作为下次的执行条件</li></ol></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">transform</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr
  <span class="token keyword">const</span> first <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">transform</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> first<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>建议：</p><ol><li>踏实</li><li>眼界</li><li>基础和底层原理</li><li>技术输出</li><li>业务解决方案比作工具（项目构建）更有价值，更容易被得到认可，方向：业务架构师</li><li>设计模式</li><li>面向对象</li><li>领域设计模式 DDD</li><li>业务抽象</li></ol></li>`,2),O=e('<h2 id="自我介绍" tabindex="-1"><a class="header-anchor" href="#自我介绍" aria-hidden="true">#</a> 自我介绍</h2><p>您好，我是2016年毕业于山东理工大学。从毕业至今就职过两家公司。</p><p>最近就职的公司是一猫汽车，业务是汽车供应链金融方面，主要负责一款ERP管理系统的底层实现，和一些开发管理工作。</p><p>下面我从技术和管理方面介绍一下我在一猫这两年任职期间的个人情况，希望各位面试官能给到指点：</p><p>首先是技术方面，技术方面呢我主要讲一下有意思的几个项目经历：</p><ol><li>第一个是前面提到的ERP管理系统。由于公司的业务倾向，前端这边主要开发任务都集中在这个系统上，技术栈是vue+ElementUI。我的工作是整个项目的搭建，公共代码的编写，根据业务抽离UI库，权限的解决方案等等。从项目搭建到开发过程中其实遇到过很多的问题，其中一个最印象深刻的就是权限的问题：权限分两方面，一个是页面权限，一个是页面上的功能权限，由于业务需要，角色有很多并且是动态创建，角色下面的对应的权限也是动态去绑定的，我的解决办法是和后端协商去维护一套权限数据模板，创建角色时可以动态去勾选所需的权限，前端根据当前用户角色的权限数据动态去组合菜单来处理路由权限，通过一个自定义指令去处理页面的功能权限，当然里面还有很多实现细节。</li><li>第二个是将旧的项目规范化。比如一猫有一个专题项目，每次开发都是 copy 以前的代码去修改，由于功能代码随意罗列，因为没有文档，导致每次翻阅代码都需要重新整理，会浪费很多时间。所以我决定使用webpack的多页面配置来解决专题项目的模块化开发问题，去封装、去写案例代码，补全开发文档，这样就将一天多的开发时间缩减到了2小时，提升了开发效率也提高了代码质量。</li><li>第三个是进行新技术的推动。比如整个前端组技术栈是 vue，并没有react开发经验，同时ts也将成为前端的开发标配，所以我就主张使用这两个结合开发一个全新需求（一款钉钉微应用），拓宽一下前端组的知识体系和开发经验。</li><li>其中还有一个小插曲，就是在开发那个ERP管理系统的时候，我在搭建完底层的时候，开发文档同时快速跟进，当时通过调研之后，最后选择的vuepress，因为想将文档和博客结合来搭建前端内部的分享平台，所以就有了我的那款开源项目，一款vuepress主题。我过去一年多的空余时间几乎都用在了维护这款项目上，结果还是很不错的，现在是最受欢迎的vuepress主题，我个人在开源团队管理以及产品迭代和推广运营的过程中学到了很多。</li></ol><p>管理方面呢，主要是团队成员的积极性和主动性方面，我遵循这么几个原则：</p><ol><li>增加交流和信任。用更多工作之外的时间去和大家交谈，增加对我的信任，并发现每个人的长处和不足，从而让每个人去扮演合适的角色来发挥长处，然后也根据不足去针对性的强化。</li><li>将思考和学习成为团队的习惯。每周除了进行必要的工作规划，还要轮流分享一个知识点或者是开发经验，制范不限，让大家始终在保持思考。</li><li>培养管理意识。管理意识，我认为从某种程度上讲，就是一种自驱动，能够自驱动的人太少太少，所以培养管理意识尤为重要。我的做法呢，就是实行业务组长轮值制度，比如他要跟进所有的项目需求会，并配合一些工具来进行任务分配和调整，这样每个人都有机会站在更高的维度去理解和处理公司的需求，从而触发其积极性和主动性。</li></ol><p>以上是我的自我介绍，希望您能指点。</p><p>对新人的处理办法：</p><ol><li>前期要进行较多的主动沟通，了解其对公司情况不断深入后的个人想法；</li><li>然后将团建频次提高，通过小需求来快速参与公司项目等，增加团队归属感，也更快地融入团队；</li><li>等比较了解个人情况后适当调整其在团队中的角色。</li></ol><p>权限分为页面权限（也就是路由权限）和页面上的功能权限，页面功能权限比较简单，通过自定义一个权限指令，根绝判断条件控制当前功能模块是否显示就可以了；复杂点的是路由权限，因为业务需要，角色可以动态创建，角色下面的对应的权限也是动态去绑定的，但是这个项目的菜单层级又比较深，所以综合这写特点，前端没有使用路由嵌套来表现菜单的层级，而是把所有的路由都创建为一级路由，并和后端协商去维护一套权限数据，根据权限的勾选情况，动态组合一套权限数据，返回给前端，前端根据权限数据动态去组合菜单，并且去控制显示页面的功能模块。这看起来是一个比较好的解决方案，但是问题也随之到来：</p><ol><li>比如点击每一层菜单高亮显示</li><li>切换高层级时的路由默认跳转行为的控制</li></ol><p>这些都需要我们去手动记录菜单点击行为和路由跳转行为。</p>',14);function Q(U,X){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[s("资源预加载preload和资源预读取prefetch简明学习"),t(a)])]),n("li",null,[n("a",d,[s("HTML rel属性值释义大全"),t(a)])])]),k,n("ul",null,[n("li",null,[n("a",v,[s("层叠上下⽂-张鑫旭"),t(a)])])]),m,n("ol",null,[h,b,g,f,_,n("li",null,[s("寻找两个子节点的共同父节点 "),n("a",y,[s("微软算法面试题：给定两个二叉树节点，寻找其最近共同祖先"),t(a)])])]),w,n("ul",null,[n("li",null,[n("a",x,[s("你真的懂git rebase吗？"),t(a)])]),n("li",null,[n("a",V,[s("【Git】rebase 用法小结"),t(a)])])]),M,n("ul",null,[n("li",null,[n("a",j,[s("vue用template还是JSX？"),t(a)])]),n("li",null,[n("a",q,[s("vuejs/jsx"),t(a)])])]),E,n("ol",null,[n("li",null,[P,n("ul",null,[n("li",null,[n("a",S,[s("MVC和MVVM的关系图解"),t(a)])]),n("li",null,[n("a",C,[s("Vue基本代码和MVVM之间对应"),t(a)])]),n("li",null,[n("a",I,[s("react是mvvm架构吗？"),t(a)])]),n("li",null,[n("a",T,[s("谈谈MVC模式"),t(a)])]),n("li",null,[n("a",L,[s("MVC，MVP 和 MVVM 的图示"),t(a)])]),n("li",null,[n("a",B,[s("MVC、MVP、MVVM、MVPVM区别"),t(a)])]),n("li",null,[n("a",D,[s("MVC, MVP, MVVM比较以及区别(上)"),t(a)])]),n("li",null,[n("a",z,[s("MVC, MVP, MVVM比较以及区别(下)"),t(a)])]),n("li",null,[n("a",N,[s("MVC，MVP 和 MVVM 模式如何选择？"),t(a)])]),n("li",null,[n("a",A,[s("Model–view–controller"),t(a)])]),n("li",null,[n("a",R,[s("Model–view–viewmodel"),t(a)])])])]),J]),O])}const G=p(i,[["render",Q],["__file","mianshiti.html.vue"]]);export{G as default};
