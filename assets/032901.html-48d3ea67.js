import{_ as n,o as s,c as a,e}from"./app-6e895db1.js";const t={},p=e(`<h1 id="vue-router" tabindex="-1"><a class="header-anchor" href="#vue-router" aria-hidden="true">#</a> vue router</h1><p>react-router 和react-router-dom 是不是两个都要引用呢？ 非也，坑就在这里。他们两个只要引用一个就行了，不同之处就是后者比前者多出了 <code>&lt;Link&gt;</code> 、 <code>&lt;BrowserRouter&gt;</code> 这样的 DOM 类组件。 因此我们只需引用 react-router-dom 这个包就行了。当然，如果搭配 redux ，你还需要使用 react-router-redux。</p><h2 id="常用组件" tabindex="-1"><a class="header-anchor" href="#常用组件" aria-hidden="true">#</a> 常用组件</h2><ol><li>BrowserRouter 包裹在最外层</li><li>Route 匹配跳转的路由</li><li>Link 跳转</li><li>Redirect 重定向</li><li>Switch 只渲染匹配到的第一个</li></ol><h2 id="书写子路由的-router" tabindex="-1"><a class="header-anchor" href="#书写子路由的-router" aria-hidden="true">#</a> 书写子路由的 Router</h2><p>这时候我们需要把父路由也写上，比如子路由为 <code>subrouter</code> 父路由为 <code>parentrouter</code>，在自页面我们可以这样配置 <code>/parentrouter/subrouter</code>，<code>\${window.location.math.url}/subrouter</code></p><h2 id="路由缓存" tabindex="-1"><a class="header-anchor" href="#路由缓存" aria-hidden="true">#</a> 路由缓存</h2><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// index.tsx</span>

<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PropsTypes<span class="token punctuation">,</span> StateTypes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./index.types&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">AsyncComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span>importComponent<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> React<span class="token punctuation">.</span>Component<span class="token operator">&lt;</span>PropsTypes<span class="token punctuation">,</span> StateTypes<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    state <span class="token operator">=</span> <span class="token punctuation">{</span>
      component<span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// eslint-disable-next-line</span>
    <span class="token function">constructor</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> PropsTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">componentDidMount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">importComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cmp<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> component<span class="token operator">:</span> cmp<span class="token punctuation">.</span>default <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> component<span class="token operator">:</span> <span class="token constant">C</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state
      <span class="token comment">// @ts-ignore</span>
      <span class="token keyword">return</span> <span class="token constant">C</span> <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> AsyncComponent
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// index.types.ts</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PropsTypes</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">StateTypes</span> <span class="token punctuation">{</span>
  component<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token constant">JSX</span><span class="token punctuation">.</span>IntrinsicElements <span class="token operator">|</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="非路由组件获取-this-props-history" tabindex="-1"><a class="header-anchor" href="#非路由组件获取-this-props-history" aria-hidden="true">#</a> 非路由组件获取 this.props.history</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> withRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span>

@withRouter
<span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在不支持 <code>修饰器</code> 的时候，可以改变 babel 配置来支持，或者这样去处理：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>YourComponent<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","032901.html.vue"]]);export{u as default};
