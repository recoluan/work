import{_ as l,r as e,o as i,c as u,a as n,d as a,w as p,b as s,e as o}from"./app-6e895db1.js";const r={},k=n("blockquote",null,[n("p",null,"前端跨域问题相关知识详解:https://www.cnblogs.com/yanayana/p/6994533.html")],-1),d={class:"table-of-contents"},v=o(`<h2 id="同源策略及限制" tabindex="-1"><a class="header-anchor" href="#同源策略及限制" aria-hidden="true">#</a> 同源策略及限制</h2><p>同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用户隔离潜在恶意文件的关键的安全机制。</p><p>源，包括三个方面：</p><ul><li>协议</li><li>域名</li><li>端口</li></ul><p>限制，主要存在于以下几个方面：</p><ul><li>Cookie、LocalStorage和IndexDB无法读取</li><li>DOM无法获得并操作</li><li>AJAX请求不能发送（ajax只适合同源通信）</li></ul><h2 id="前后端通信" tabindex="-1"><a class="header-anchor" href="#前后端通信" aria-hidden="true">#</a> 前后端通信</h2><ul><li>Ajax：只支持同源通信</li><li>WebSocket：不受同源策略限制</li><li>CORS：新的通信协议标准</li></ul><h2 id="如何创建ajax" tabindex="-1"><a class="header-anchor" href="#如何创建ajax" aria-hidden="true">#</a> 如何创建Ajax</h2><ul><li>XMLHttpRequest对象的工作流程</li><li>兼容性处理</li><li>事件的触发条件</li><li>事件的触发顺序</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">recoAjax</span> <span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建一个 XMLHttpRequest 对象</span>
  <span class="token keyword">var</span> xhr <span class="token operator">=</span> window<span class="token punctuation">.</span>XMLHttpRequest <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&quot;Microsoft.XMLHTTP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    requestData <span class="token operator">=</span> option<span class="token punctuation">.</span>data<span class="token punctuation">,</span>
    requestUrl <span class="token operator">=</span> option<span class="token punctuation">.</span>url<span class="token punctuation">,</span>
    requestMethod <span class="token operator">=</span> option<span class="token punctuation">.</span>method<span class="token punctuation">;</span>
  <span class="token comment">// 如果是GET请求，需要将option中的参数拼接到URL后面</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span> <span class="token operator">!=</span> requestMethod <span class="token operator">&amp;&amp;</span> requestData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> query_string <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">// 遍历option.data对象，构建GET查询参数</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> requestData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      query_string <span class="token operator">+=</span> item <span class="token operator">+</span> <span class="token string">&#39;=&#39;</span> <span class="token operator">+</span> requestData<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 注意这儿拼接的时候，需要判断是否已经有 ?</span>
    requestUrl<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>
      <span class="token operator">?</span> requestUrl <span class="token operator">=</span> requestUrl <span class="token operator">+</span> <span class="token string">&#39;&amp;&#39;</span> <span class="token operator">+</span> query_string
      <span class="token operator">:</span> requestUrl <span class="token operator">=</span> requestUrl <span class="token operator">+</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">+</span> query_string<span class="token punctuation">;</span>
    <span class="token comment">// GET 请求参数放在URL中，将requestData置为空</span>
    requestData <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ajax 请求成功之后的回调函数</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// readyState=4表示接受响应完毕</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">==</span> xhr<span class="token punctuation">.</span>status <span class="token operator">||</span> <span class="token number">200</span> <span class="token operator">==</span> xhr<span class="token punctuation">.</span>status <span class="token operator">||</span> <span class="token number">304</span> <span class="token operator">==</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断状态码</span>
        <span class="token keyword">var</span> response <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response <span class="token operator">||</span> xhr<span class="token punctuation">.</span>responseText <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 获取返回值</span>
        <span class="token comment">// if define success callback, call it, if response is string, convert it to json objcet</span>
        option<span class="token punctuation">.</span>success <span class="token operator">&amp;&amp;</span> option<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用回调函数处理返回数据</span>
        <span class="token comment">// 可以判断返回数据类型，对数据进行JSON解析或者XML解析</span>
        <span class="token comment">// option.success &amp;&amp; option.success(&#39;string&#39; == typeof response ? JSON.parse(response) : response);</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// if define fail callback, call it</span>
        option<span class="token punctuation">.</span>fail <span class="token operator">&amp;&amp;</span> option<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>xhr<span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 发送ajax请求</span>
  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>requestMethod<span class="token punctuation">,</span> requestUrl<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 请求超时的回调</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    option<span class="token punctuation">.</span>timeout <span class="token operator">&amp;&amp;</span> option<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span>xhr<span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 定义超时时间</span>
  xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> option<span class="token punctuation">.</span>timeout <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// 设置响应头部，这儿默认设置为json格式，可以定义为其他格式，修改头部即可</span>
  xhr<span class="token punctuation">.</span>setRequestHeader <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/json;charset=utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>xhrFields <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>withCredentials<span class="token punctuation">;</span>
  <span class="token comment">// 这儿主要用于发送POST请求的数据</span>
  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>requestData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ajax的优缺点" tabindex="-1"><a class="header-anchor" href="#ajax的优缺点" aria-hidden="true">#</a> Ajax的优缺点</h3><p><strong>优点</strong></p><ol><li>页面无刷新，在页面内与服务器通信，减少用户等待时间，增强了用户体验。</li><li>使用异步方式与服务器通信，响应速度更快。</li><li>可以把一些原本服务器的工作转接到客户端，利用客户端闲置的能力来处理，减轻了服务器和带宽的负担，节约空间和宽带租用成本。</li><li>基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。</li></ol><p><strong>缺</strong>点</p><ol><li>无法进行操作的后退，即不支持浏览器的页面后退。</li><li>对搜索引擎的支持比较弱。</li><li>可能会影响程序中的异常处理机制。</li><li>安全问题，对一些网站攻击，如csrf、xxs、sql注入等不能很好地防御。</li></ol><h2 id="跨域通信的几种方式" tabindex="-1"><a class="header-anchor" href="#跨域通信的几种方式" aria-hidden="true">#</a> 跨域通信的几种方式</h2><ul><li>JSONP</li><li>Hash: URL中#后面的部分，hash改变，页面不刷新</li><li>postMessage：HTML5</li><li>WebSocket</li><li>CORS</li></ul><h4 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">recoJsonp</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token punctuation">{</span> url<span class="token punctuation">,</span> callbackName<span class="token punctuation">,</span> onsuccess<span class="token punctuation">,</span> onerror<span class="token punctuation">,</span> charset <span class="token punctuation">}</span> <span class="token operator">=</span> options

  window<span class="token punctuation">[</span>callbackName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    onsuccess <span class="token operator">&amp;&amp;</span> <span class="token function">onsuccess</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> head <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;head&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         
  <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建script标签，设置其属性         </span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">&quot;&amp;callback=jsonpCallback&quot;</span><span class="token punctuation">;</span>
  script<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;text/javascript&quot;</span><span class="token punctuation">;</span>                            
  script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//script.src= url;//提供jsonp服务的url地址</span>
  head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把script标签加入head，此时调用开始</span>

  script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    script<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>
    window<span class="token punctuation">[</span>callbackName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
  script<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    onerror <span class="token operator">&amp;&amp;</span> <span class="token function">onerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),m={href:"https://blog.csdn.net/hansexploration/article/details/80314948",target:"_blank",rel:"noopener noreferrer"},b=o(`<h4 id="hash" tabindex="-1"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> hash</h4><p>A页面嵌套B页面，如果通过改变B页面的hash来给页面B通信，在B页面通过window.onhashchange来舰艇hash的变化</p><h4 id="postmessage" tabindex="-1"><a class="header-anchor" href="#postmessage" aria-hidden="true">#</a> postMessage</h4><p>A页面嵌套B页面</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// A</span>
<span class="token comment">// 可以使用*，但是不安全</span>
Awindow<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  Bwindow<span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;getcolor&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;B URL&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// B</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>source<span class="token operator">!=</span>window<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> color<span class="token operator">=</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token punctuation">;</span>
  window<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有几个重要属性：</p><ul><li>data：顾名思义，是传递来的message</li><li>source：发送消息的窗口对象</li><li>origin：发送消息窗口的源（协议+主机+端口号）</li></ul><h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> WebSocket</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>&#39;wss<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ehco<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>org<span class="token punctuation">)</span>

ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;connection open!&#39;</span><span class="token punctuation">)</span>
  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;received Message:&#39;</span><span class="token punctuation">,</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;connection close&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cors" tabindex="-1"><a class="header-anchor" href="#cors" aria-hidden="true">#</a> CORS</h2><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p><p>请求包括简单请求和复杂请求，只要同时满足以下两大条件，就属于简单请求。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. 请求方法是以下三种方法之一：
    - HEAD
    - GET
    - POST
2. HTTP的头信息不超出以下几种字段：
    - Accept
    - Accept-Language
    - Content-Language
    - Last-Event-ID
    - Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。</p><p>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为&quot;预检&quot;（<code>OPTIONS</code>）请求（preflight）。最关键的是 <code>Access-Control-Allow-Origin</code> 字段设置为 <code>*</code> 或者是同意发送请求的域名，可以设置以下参数：</p><ol><li>Access-Control-Allow-Credentials：只可以设置 <code>true</code> ，意思为允许发送cookie，去掉即为不允许</li><li>Access-Control-Expose-Headers：设置允许的请求头，该字段是一个逗号分隔的字符串</li><li>Access-Control-Request-Method：该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法</li></ol><blockquote><p>跨域资源共享 CORS 详解:http://www.ruanyifeng.com/blog/2016/04/cors.html</p></blockquote>`,17);function h(f,g){const t=e("router-link"),c=e("ExternalLinkIcon");return i(),u("div",null,[k,n("nav",d,[n("ul",null,[n("li",null,[a(t,{to:"#同源策略及限制"},{default:p(()=>[s("同源策略及限制")]),_:1})]),n("li",null,[a(t,{to:"#前后端通信"},{default:p(()=>[s("前后端通信")]),_:1})]),n("li",null,[a(t,{to:"#如何创建ajax"},{default:p(()=>[s("如何创建Ajax")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#ajax的优缺点"},{default:p(()=>[s("Ajax的优缺点")]),_:1})])])]),n("li",null,[a(t,{to:"#跨域通信的几种方式"},{default:p(()=>[s("跨域通信的几种方式")]),_:1})]),n("li",null,[a(t,{to:"#websocket"},{default:p(()=>[s("WebSocket")]),_:1})]),n("li",null,[a(t,{to:"#cors"},{default:p(()=>[s("CORS")]),_:1})])])]),v,n("blockquote",null,[n("p",null,[s("参考："),n("a",m,[s("文档"),a(c)])])]),b])}const x=l(r,[["render",h],["__file","030308.html.vue"]]);export{x as default};
