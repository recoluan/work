import{_ as i,o as a,c as l,e}from"./app-6e895db1.js";const r={},t=e('<p>web前端是应用服务器处理之前的部分，前端主要包括：HTML,CSS,javascript,image等各种资源，针对不同的资源有不同的优化方式。</p><h2 id="内容优化" tabindex="-1"><a class="header-anchor" href="#内容优化" aria-hidden="true">#</a> 内容优化</h2><ol><li>减少HTTP请求数:这条策略是最重要最有效的，因为一个完整的请求要经过DNS寻址，与服务器建立连接，发送数据，等待服务器响应，接收数据这样一个消耗时间成本和资源成本的复杂的过程。 常见方法：合并多个CSS文件和js文件，利用CSS Sprites整合图像，Inline Images(使用 data：URL scheme在实际的页面嵌入图像数据 )，合理设置HTTP缓存等。</li><li>减少DNS查找</li><li>避免重定向</li><li>使用Ajax缓存</li><li>延迟加载组件,预加载组件</li><li>减少DOM元素数量:页面中存在大量DOM元素,会导致javascript遍历DOM的效率变慢。</li><li>最小化iframe的数量：iframes 提供了一个简单的方式把一个网站的内容嵌入到另一个网站中。但其创建速度比其他包括JavaScript和CSS的DOM元素的创建慢了1-2个数量级。</li><li>避免404：HTTP请求时间消耗是很大的，因此使用HTTP请求来获得一个没有用处的响应（例如404没有找到页面）是完全没有必要的，它只会降低用户体验而不会有一点好处。</li></ol><h2 id="服务器优化" tabindex="-1"><a class="header-anchor" href="#服务器优化" aria-hidden="true">#</a> 服务器优化</h2><ol><li>使用内容分发网络（CDN）：把网站内容分散到多个、处于不同地域位置的服务器上可以加快下载速度。</li><li>GZIP压缩</li><li>设置ETag：ETags（Entity tags，实体标签）是web服务器和浏览器用于判断浏览器缓存中的内容和服务器中的原始内容是否匹配的一种机制。</li><li>提前刷新缓冲区</li><li>对Ajax请求使用GET方法</li><li>避免空的图像src</li></ol><h2 id="cookie优化" tabindex="-1"><a class="header-anchor" href="#cookie优化" aria-hidden="true">#</a> Cookie优化</h2><ol><li>减小Cookie大小</li><li>针对Web组件使用域名无关的Cookie</li></ol><h2 id="css优化" tabindex="-1"><a class="header-anchor" href="#css优化" aria-hidden="true">#</a> CSS优化</h2><ol><li>将CSS代码放在HTML页面的顶部</li><li>避免使用CSS表达式</li><li>使用<link>来代替@import</li><li>避免使用Filters</li></ol><h2 id="javascript优化" tabindex="-1"><a class="header-anchor" href="#javascript优化" aria-hidden="true">#</a> javascript优化</h2><ol><li>将JavaScript脚本放在页面的底部。</li><li>将JavaScript和CSS作为外部文件来引用：在实际应用中使用外部文件可以提高页面速度，因为JavaScript和CSS文件都能在浏览器中产生缓存。</li><li>缩小JavaScript和CSS</li><li>删除重复的脚本</li><li>最小化DOM的访问：使用JavaScript访问DOM元素比较慢。</li><li>开发智能的事件处理程序</li><li>javascript代码注意：谨慎使用with,避免使用eval Function函数,减少作用域链查找。</li></ol><h2 id="图像优化" tabindex="-1"><a class="header-anchor" href="#图像优化" aria-hidden="true">#</a> 图像优化</h2><ol><li>优化图片大小</li><li>通过CSS Sprites优化图片</li><li>不要在HTML中使用缩放图片</li><li>favicon.ico要小而且可缓存</li></ol>',13),c=[t];function o(s,n){return a(),l("div",null,c)}const d=i(r,[["render",o],["__file","xingneng.html.vue"]]);export{d as default};
