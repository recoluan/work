import{_ as l,r as p,o as i,c as u,a as n,d as a,w as e,b as s,e as o}from"./app-6e895db1.js";const k={},r={class:"table-of-contents"},d=o('<h2 id="基本概念-dom事件的级别" tabindex="-1"><a class="header-anchor" href="#基本概念-dom事件的级别" aria-hidden="true">#</a> 基本概念：DOM事件的级别</h2><ol><li>DOM0：element.onclick = function () {}</li><li>DOM1：没有对DOM事件的更新，所以略过</li><li>DOM2：element.addEventListener(&#39;click&#39;, function () {}, false)，增加了addEventListener触发事件的方法</li><li>DOM3：element.addEventListener(&#39;keyup&#39;, function () {}, false)，只是增加了更多的事件种类</li></ol><blockquote><p>element.addEventListener(event, function, useCapture)</p><ul><li>event 必须，字符串，指定事件名。</li><li>function 必须，指定要事件触发时执行的函数。</li><li>useCapture 可选：false - 默认，事件在冒泡阶段执行；true - 事件在捕获阶段执行。</li></ul></blockquote><h2 id="dom事件模型-冒泡和捕获" tabindex="-1"><a class="header-anchor" href="#dom事件模型-冒泡和捕获" aria-hidden="true">#</a> DOM事件模型（冒泡和捕获）</h2><ul><li>捕获：事件从window对象到目标元素</li><li>冒泡：事件从目标元素再返回window对象</li></ul><h2 id="dom事件流" tabindex="-1"><a class="header-anchor" href="#dom事件流" aria-hidden="true">#</a> DOM事件流</h2><ol><li>捕获</li><li>目标阶段：事件通过捕获到达目标元素</li><li>冒泡：目标元素再冒泡到window对象</li></ol>',7),v={class:"custom-container tip"},m=n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])],-1),g=n("p",{class:"custom-container-title"},"TIP",-1),b=n("ol",null,[n("li",null,"w3c规定了，任何发生在w3c事件模型中的事件，首是进入捕获阶段，直到达到目标元素，再进入冒泡阶段；"),n("li",null,[s("绑定在被点击元素的多个事件，无论 "),n("code",null,"useCapture"),s(" 为 "),n("code",null,"true"),s(" 还是 "),n("code",null,"false"),s("，是按照代码的顺序发生的。")])],-1),h=n("code",null,"非目标元素捕获 -> 目标元素代码顺序 -> 非目标元素冒泡",-1),f={href:"https://blog.csdn.net/moguzhale/article/details/53503044",target:"_blank",rel:"noopener noreferrer"},_=o(`<h2 id="描述dom事件捕获的具体流程-冒泡与之相反" tabindex="-1"><a class="header-anchor" href="#描述dom事件捕获的具体流程-冒泡与之相反" aria-hidden="true">#</a> 描述DOM事件捕获的具体流程（冒泡与之相反）</h2><p>window--&gt;document-&gt;html--&gt;body--&gt;DOM树</p><blockquote><p>题外：获取body--&gt;document.body，获取html--&gt;document.documentElement</p></blockquote><h2 id="event对象的常见应用" tabindex="-1"><a class="header-anchor" href="#event对象的常见应用" aria-hidden="true">#</a> Event对象的常见应用</h2><ol><li>event.preventDefault() 阻止事件认行为</li><li>event.stopPropagation() 阻止冒泡</li><li>event.stopImmediatePropagation() 绑定了两个事件A和B，如果想在触发A之后不再触发B可，以在A中使用此方法</li><li>event.currentTarget 当前点击绑定事件的元素</li><li>event.target 当前点击的元素</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>b<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>123214<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;currentTarget&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果点击的DOM b，<code>e.target</code> 会输出DOM b，而 <code>e.currentTarget</code> 会输出DOM a</p><h2 id="自定义事件" tabindex="-1"><a class="header-anchor" href="#自定义事件" aria-hidden="true">#</a> 自定义事件</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义</span>
<span class="token keyword">const</span> eve <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&#39;custom&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 监听</span>
event<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;custom&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>

<span class="token comment">// 触发</span>
event<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>eve<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 <code>CustomEvent</code> 来自定义事件，除了上述功能，还可以添加参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义</span>
<span class="token keyword">const</span> eve <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token string">&#39;custom&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 监听</span>
event<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;custom&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>

<span class="token comment">// 触发</span>
event<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>eve<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件委托" tabindex="-1"><a class="header-anchor" href="#事件委托" aria-hidden="true">#</a> 事件委托</h2><p>事件委托就是利⽤事件冒泡，只指定⼀个事件处理程序，就可以管理某⼀类型的所有事件。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>three<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#parent&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">//⽗元素绑定事件，代理⼦元素的点击事件</span>
  dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> event<span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event
    <span class="token keyword">const</span> curTarget<span class="token operator">=</span> event<span class="token punctuation">.</span>target <span class="token operator">||</span> event<span class="token punctuation">.</span>srcElement
    <span class="token keyword">if</span> <span class="token punctuation">(</span>curTarget<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//事件处理</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点:</p><ul><li>节省内存占⽤，减少事件注册</li><li>新增⼦对象时⽆需再次对其绑定事件，适合动态添加元素</li></ul><p>局限性:</p><ul><li>focus、blur 之类的事件本身没有事件冒泡机制，所以⽆法委托</li><li>mousemove、mouseout 这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗⾼，不适 合事件委托</li></ul>`,18);function w(q,x){const t=p("router-link"),c=p("ExternalLinkIcon");return i(),u("div",null,[n("nav",r,[n("ul",null,[n("li",null,[a(t,{to:"#基本概念-dom事件的级别"},{default:e(()=>[s("基本概念：DOM事件的级别")]),_:1})]),n("li",null,[a(t,{to:"#dom事件模型-冒泡和捕获"},{default:e(()=>[s("DOM事件模型（冒泡和捕获）")]),_:1})]),n("li",null,[a(t,{to:"#dom事件流"},{default:e(()=>[s("DOM事件流")]),_:1})]),n("li",null,[a(t,{to:"#描述dom事件捕获的具体流程-冒泡与之相反"},{default:e(()=>[s("描述DOM事件捕获的具体流程（冒泡与之相反）")]),_:1})]),n("li",null,[a(t,{to:"#event对象的常见应用"},{default:e(()=>[s("Event对象的常见应用")]),_:1})]),n("li",null,[a(t,{to:"#自定义事件"},{default:e(()=>[s("自定义事件")]),_:1})]),n("li",null,[a(t,{to:"#事件委托"},{default:e(()=>[s("事件委托")]),_:1})])])]),d,n("div",v,[m,g,b,n("p",null,[s("综上事件的整体顺序是："),h,s("（"),n("a",f,[s("参考"),a(c)]),s("）")])]),_])}const E=l(k,[["render",w],["__file","030304.html.vue"]]);export{E as default};
